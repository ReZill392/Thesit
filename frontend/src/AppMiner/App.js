import React, { useState, useEffect, useCallback, useRef, useMemo } from "react";
import '../CSS/App.css';
import { fetchPages, getMessagesBySetId, fetchConversations } from "../Features/Tool";
import Sidebar from "./Sidebar"; 
import Popup from "./Component_App/MinerPopup";
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import * as mammoth from 'mammoth';
import SyncCustomersButton from './Component_App/SyncCustomersButton';
import DateFilterBadge from './Component_App/DateFilterBadge';

// üé® Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö optimized
const TimeAgoCell = React.memo(({ lastMessageTime, updatedTime, userId, onInactivityChange }) => {
  const [displayTime, setDisplayTime] = useState('');
  const [inactivityMinutes, setInactivityMinutes] = useState(0);
  const intervalRef = useRef(null); // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏° ref

  useEffect(() => {
    const updateTime = () => {
      const referenceTime = lastMessageTime || updatedTime;
      if (!referenceTime) {
        setDisplayTime('-');
        setInactivityMinutes(0);
        return;
      }

      const past = new Date(referenceTime);
      const now = new Date();
      const diffMs = now.getTime() - past.getTime();
      const diffSec = Math.floor(diffMs / 1000);
      const diffMin = Math.floor(diffSec / 60);

      setInactivityMinutes(diffMin > 0 ? diffMin : 0);

      if (onInactivityChange && userId) {
        onInactivityChange(userId, diffMin > 0 ? diffMin : 0);
      }

      if (diffSec < 0) {
        setDisplayTime('0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß');
      } else if (diffSec < 60) {
        setDisplayTime(`${diffSec} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        const diffMin = Math.floor(diffSec / 60);
        if (diffMin < 60) {
          setDisplayTime(`${diffMin} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
        } else {
          const diffHr = Math.floor(diffMin / 60);
          if (diffHr < 24) {
            setDisplayTime(`${diffHr} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
          } else {
            const diffDay = Math.floor(diffHr / 24);
            if (diffDay < 7) {
              setDisplayTime(`${diffDay} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
            } else {
              const diffWeek = Math.floor(diffDay / 7);
              if (diffWeek < 4) {
                setDisplayTime(`${diffWeek} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
              } else {
                const diffMonth = Math.floor(diffDay / 30);
                if (diffMonth < 12) {
                  setDisplayTime(`${diffMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
                } else {
                  const diffYear = Math.floor(diffDay / 365);
                  setDisplayTime(`${diffYear} ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`);
                }
              }
            }
          }
        }
      }
    };

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå interval ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà prop ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if (intervalRef.current) clearInterval(intervalRef.current);

    updateTime(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ prop ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    const referenceTime = lastMessageTime || updatedTime;
    if (!referenceTime) return;

    const past = new Date(referenceTime);
    const now = new Date();
    const diffMs = now.getTime() - past.getTime();
    const diffMin = Math.floor(diffMs / 60000); 

    let intervalMs; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    if (diffMin < 1) { 
      intervalMs = 1000;
    } else if (diffMin < 60) {
      intervalMs = 60000;
    } else {
      intervalMs = 3600000;
    }

    intervalRef.current = setInterval(updateTime, intervalMs);

    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [lastMessageTime, updatedTime, userId, onInactivityChange]);
  
  
  const isRecent = lastMessageTime && 
    new Date(lastMessageTime) > new Date(Date.now() - 60000);
  
  return (
    <td className={`table-cell ${isRecent ? 'recent-message' : ''}`}>
      <div className="time-display">
        {isRecent && <span className="pulse-dot"></span>}
        {displayTime}
        <span className="inactivity-minutes" style={{ display: 'none' }}>
          {inactivityMinutes}
        </span>
      </div>
    </td>
  );
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Database
const CustomerInfoBadge = ({ customer }) => {
  const getTimeDiff = (dateStr) => {
    if (!dateStr) return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
    const date = new Date(dateStr);
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    if (diffDays > 0) return `${diffDays} ‡∏ß‡∏±‡∏ô`;
    if (diffHours > 0) return `${diffHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
    if (diffMinutes > 0) return `${diffMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà';
  };

  return (
    <div style={{
      display: 'flex',
      flexDirection: 'column',
      gap: '4px',
      fontSize: '11px',
      color: '#718096',
      marginTop: '4px'
    }}>
      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
        <span>üïê</span>
        <span>‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: {getTimeDiff(customer.first_interaction_at)} ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß</span>
      </div>
      {customer.source_type && (
        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
          <span>üìç</span>
          <span>‡∏ó‡∏µ‡πà‡∏°‡∏≤: {customer.source_type === 'new' ? 'User ‡πÉ‡∏´‡∏°‡πà' : 'Import'}</span>
        </div>
      )}
    </div>
  );
};

// Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
const CustomerStatistics = ({ selectedPage }) => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (selectedPage) {
      loadStatistics();
    }
    // eslint-disable-next-line
  }, [selectedPage]);

  const loadStatistics = async () => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:8000/customer-statistics/${selectedPage}`);
      if (response.ok) {
        const data = await response.json();
        setStats(data.statistics);
      }
    } catch (error) {
      console.error('Error loading statistics:', error);
    } finally {
      setLoading(false);
    }
  };

 
};

// üé® Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
const ConversationRow = React.memo(({ 
  conv, 
  idx, 
  isSelected, 
  onToggleCheckbox,
  onInactivityChange 
}) => {
  const statusColors = {
    '‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß': '#48bb78',
    '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î': '#e53e3e',
    '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö': '#3182ce'
  };

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å conv.customerType ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const customerTypeMap = {
    newCM: { name: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà", color: "#667eea" },
    intrestCM: { name: "‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏π‡∏á", color: "#38b2ac" },
    dealDoneCM: { name: "‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", color: "#ecc94b" },
    exCM: { name: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤", color: "#718096" }
  };
  const customerTypeInfo = customerTypeMap[conv.customerType];

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• platform ‡∏à‡∏≤‡∏Å conv.platform ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const platformMap = {
    FB: {
      label: "Facebook",
      icon: (
        <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
          <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
        </svg>
      ),
      className: "facebook"
    },
    Line: {
      label: "Line",
      icon: (
        <svg width="12" height="12" viewBox="0 0 48 48" fill="currentColor">
          <ellipse cx="24" cy="24" rx="20" ry="18" fill="#00c300"/>
          <text x="24" y="30" textAnchor="middle" fontSize="18" fill="#fff" fontFamily="Arial">LINE</text>
        </svg>
      ),
      className: "line"
    }
  };
  const platformInfo = platformMap[conv.platform] || platformMap.FB;

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î‡∏à‡∏≤‡∏Å conv.miningStatus ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const miningStatusMap = {
    Mining: { label: "‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", color: statusColors['‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß'] },
    "0Mining": { label: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î", color: statusColors['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î'] },
    returnCM: { label: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö", color: statusColors['‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'] }
  };
  const miningStatusInfo = miningStatusMap[conv.miningStatus] || { label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î", color: "#a0aec0" };

  return (
    <tr className={`table-row ${isSelected ? 'selected' : ''}`}>
      <td className="table-cell text-center">
        <div className="row-number">{idx + 1}</div>
      </td>
      <td className="table-cell">
        <div className="user-info">
          <div className="user-avatar">
            {conv.user_name?.charAt(0) || 'U'}
          </div>
          <div className="user-details">
            <div className="user-name">{conv.conversation_name || `‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà ${idx + 1}`}</div>
            {conv.source_type && <CustomerInfoBadge customer={conv} />}
          </div>
        </div>
      </td>
      <td className="table-cell">
        <div className="date-display">
          {conv.last_user_message_time
            ? new Date(conv.last_user_message_time).toLocaleDateString("th-TH", {
              year: 'numeric', month: 'short', day: 'numeric'
            })
            : "-"
          }
        </div>
      </td>
      <TimeAgoCell   
        lastMessageTime={conv.last_user_message_time}
        updatedTime={conv.updated_time}
        userId={conv.raw_psid}
        onInactivityChange={onInactivityChange}
      />
      <td className="table-cell">
        <span className="product-tag">{conv.product_interest || "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à"}</span>
      </td>
      <td className="table-cell">
        <div className={`platform-badge ${platformInfo.className}`}>
          {platformInfo.icon}
          {platformInfo.label}
        </div>
      </td>
      <td className="table-cell">
        {customerTypeInfo ? (
          <span style={{
            background: customerTypeInfo.color,
            color: "#fff",
            padding: "4px 12px",
            borderRadius: "12px",
            fontSize: "13px",
            fontWeight: "600",
            display: "inline-block"
          }}>
            {customerTypeInfo.name}
          </span>
        ) : (
          <span style={{
            background: "#f7fafc",
            color: "#718096",
            padding: "4px 12px",
            borderRadius: "12px",
            fontSize: "13px",
            display: "inline-block"
          }}>
            ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
          </span>
        )}
      </td>
      <td className="table-cell">
        <div className="status-indicator" style={{ '--status-color': miningStatusInfo.color }}>
          <span className="customer-type new">{miningStatusInfo.label}</span>
        </div>
      </td>
      <td className="table-cell text-center">
        <label className="custom-checkbox">
          <input
            type="checkbox"
            checked={isSelected}
            onChange={() => onToggleCheckbox(conv.conversation_id)}
          />
          <span className="checkbox-mark"></span>
        </label>
      </td>
    </tr>
  );
});

// üé® Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö File Upload Section
const FileUploadSection = ({ onSelectUsers, onClearSelection }) => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadedFileName, setUploadedFileName] = useState('');
  const [usersFromFile, setUsersFromFile] = useState([]);
  const fileInputRef = useRef(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
  const readExcelFile = async (file) => {
    try {
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const firstSheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[firstSheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);
      
      // ‡∏™‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏õ‡∏£‡∏±‡∏ö column name ‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á)
      const userNames = [];
      jsonData.forEach(row => {
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ column ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        const name = row['‡∏ä‡∏∑‡πà‡∏≠'] || row['Name'] || row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'] || row['Username'] || 
                    row['‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || row['Full Name'] || row['‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'] || row['User'];
        if (name) {
          userNames.push(name.toString().trim());
        }
      });
      
      return [...new Set(userNames)]; // Remove duplicates
    } catch (error) {
      console.error('Error reading Excel file:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word
  const readWordFile = async (file) => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const result = await mammoth.extractRawText({ arrayBuffer });
      const text = result.value;
      
      // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)
      const lines = text.split('\n').filter(line => line.trim());
      const userNames = lines.map(line => line.trim());
      
      return [...new Set(userNames)]; // Remove duplicates
    } catch (error) {
      console.error('Error reading Word file:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word ‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
  const readCSVFile = async (file) => {
    return new Promise((resolve, reject) => {
      Papa.parse(file, {
        complete: (results) => {
          const userNames = [];
          results.data.forEach(row => {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ column
            const name = row[0] || row['‡∏ä‡∏∑‡πà‡∏≠'] || row['Name'] || row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'];
            if (name && name.trim()) {
              userNames.push(name.trim());
            }
          });
          resolve([...new Set(userNames)]);
        },
        error: (error) => {
          reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ'));
        },
        header: true
      });
    });
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsUploading(true);
    setUploadedFileName(file.name);

    try {
      let userNames = [];
      const fileType = file.name.split('.').pop().toLowerCase();

      switch (fileType) {
        case 'xlsx':
        case 'xls':
          userNames = await readExcelFile(file);
          break;
        case 'docx':
        case 'doc':
          userNames = await readWordFile(file);
          break;
        case 'csv':
          userNames = await readCSVFile(file);
          break;
        default:
          throw new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx, .xls), Word (.docx, .doc) ‡πÅ‡∏•‡∏∞ CSV (.csv)');
      }

      if (userNames.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå');
      }

      setUsersFromFile(userNames);
      showSuccessNotification(`‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ${userNames.length} ‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå`);
    } catch (error) {
      showErrorNotification(error.message);
      setUploadedFileName('');
      setUsersFromFile([]);
    } finally {
      setIsUploading(false);
    }
  };

  const selectUsersFromFile = () => {
    if (usersFromFile.length === 0) {
      showErrorNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }
    onSelectUsers(usersFromFile);
    showSuccessNotification(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${usersFromFile.length} ‡∏Ñ‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå`);
  };

  const clearFile = () => {
    setUploadedFileName('');
    setUsersFromFile([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    if (onClearSelection) {
      onClearSelection(); // ‡∏•‡πâ‡∏≤‡∏á checkbox ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    }
  };

  const showSuccessNotification = (message) => {
    const notification = document.createElement('div');
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const showErrorNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚ùå</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  return (
    <div className="file-upload-section">
      <div className="file-upload-container">
        <input
          ref={fileInputRef}
          type="file"
          accept=".xlsx,.xls,.doc,.docx,.csv"
          onChange={handleFileUpload}
          className="file-input"
          id="file-upload"
        />
        <label htmlFor="file-upload" className="file-upload-label">
          <span className="upload-icon">üìÅ</span>
          <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠</span>
        </label>
        
        {uploadedFileName && (
          <div className="uploaded-file-info">
            <span className="file-name">{uploadedFileName}</span>
            <span className="user-count">({usersFromFile.length} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠)</span>
            <button onClick={clearFile} className="clear-file-btn">‚úñ</button>
          </div>
        )}
        
        <button
          onClick={selectUsersFromFile}
          disabled={usersFromFile.length === 0 || isUploading}
          className="select-from-file-btn"
        >
          <span className="btn-icon">‚úì</span>
          ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        </button>
        
        {isUploading && (
          <div className="upload-loading">
            <span className="loading-spinner"></span>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå...</span>
          </div>
        )}
      </div>
      
      {usersFromFile.length > 0 && (
        <div className="file-users-preview">
          <h4>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:</h4>
          <div className="users-list">
            {usersFromFile.slice(0, 5).map((user, index) => (
              <span key={index} className="user-badge">{user}</span>
            ))}
            {usersFromFile.length > 5 && (
              <span className="more-users">...‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {usersFromFile.length - 5} ‡∏Ñ‡∏ô</span>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

function App() {
  const [pages, setPages] = useState([]);
  const [selectedPage, setSelectedPage] = useState("");
  const [conversations, setConversations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showFilter, setShowFilter] = useState(false);
  const [disappearTime, setDisappearTime] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [customerType, setCustomerType] = useState("");
  const [platformType, setPlatformType] = useState("");
  const [miningStatus, setMiningStatus] = useState("");
  const [allConversations, setAllConversations] = useState([]);
  const [filteredConversations, setFilteredConversations] = useState([]);
  const [pageId, setPageId] = useState("");
  const [selectedConversationIds, setSelectedConversationIds] = useState([]);
  const [defaultMessages, setDefaultMessages] = useState([]);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [selectedMessageSetIds, setSelectedMessageSetIds] = useState([]);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [lastUpdateTime, setLastUpdateTime] = useState(new Date());
  const [syncDateRange, setSyncDateRange] = useState(null);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inactivity
  const [userInactivityData, setUserInactivityData] = useState({});
  const inactivityUpdateTimerRef = useRef(null);

  const clockIntervalRef = useRef(null);
  
  const messageCache = useRef({});
  const cacheTimeout = 5 * 60 * 1000;

  const getCachedData = (key, cache) => {
    const cached = cache.current[key];
    if (cached && Date.now() - cached.timestamp < cacheTimeout) {
      return cached.data;
    }
    return null;
  };

  const setCachedData = (key, data, cache) => {
    cache.current[key] = {
      data,
      timestamp: Date.now()
    };
  };
 
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å loadConversations function
  const handleloadConversations = () => {
    if (!selectedPage) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à");
      return;
    }
    messageCache.current = {};
    loadConversations(selectedPage);
  };
  

  const displayData = useMemo(() => {
    return filteredConversations.length > 0 ? filteredConversations : conversations;
  }, [filteredConversations, conversations]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
  const calculateInactivityMinutes = (lastMessageTime, updatedTime) => {
    const referenceTime = lastMessageTime || updatedTime;
    if (!referenceTime) return 0;
    
    const past = new Date(referenceTime);
    const now = new Date();
    const diffMs = now.getTime() - past.getTime();
    const diffMinutes = Math.floor(diffMs / 60000);
    
    return diffMinutes > 0 ? diffMinutes : 0;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inactivity ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
  const handleInactivityChange = useCallback((userId, minutes) => {
    setUserInactivityData(prev => ({
      ...prev,
      [userId]: {
        minutes,
        updatedAt: new Date()
      }
    }));
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö active schedules
  const checkActiveSchedules = async () => {
    if (!selectedPage) return;
    
    try {
      const response = await fetch(`http://localhost:8000/active-schedules/${selectedPage}`);
      if (response.ok) {
        const data = await response.json();
        console.log('Active schedules:', data);
      }
    } catch (error) {
      console.error('Error checking active schedules:', error);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inactivity ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend ‡πÅ‡∏ö‡∏ö batch
  const sendInactivityBatch = useCallback(async () => {
    if (!selectedPage || displayData.length === 0) return;
    
    try {
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á
      const userData = displayData.map(conv => {
        const inactivityInfo = userInactivityData[conv.raw_psid] || {};
        return {
          user_id: conv.raw_psid,
          conversation_id: conv.conversation_id,
          last_message_time: conv.last_user_message_time || conv.updated_time,
          inactivity_minutes: inactivityInfo.minutes || calculateInactivityMinutes(
            conv.last_user_message_time,
            conv.updated_time
          )
        };
      });
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      const response = await fetch(`http://localhost:8000/update-user-inactivity/${selectedPage}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ users: userData })
      });
      
      if (!response.ok) {
        throw new Error('Failed to update inactivity data');
      }
      
      const result = await response.json();
      console.log('‚úÖ Batch update inactivity data:', result);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó active schedules ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await checkActiveSchedules();

    } catch (error) {
      console.error('‚ùå Error sending inactivity batch:', error);
    }
  }, [selectedPage, displayData, userInactivityData]);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• inactivity ‡πÅ‡∏ö‡∏ö batch ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    // Clear previous timer
    if (inactivityUpdateTimerRef.current) {
      clearInterval(inactivityUpdateTimerRef.current);
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    sendInactivityBatch();
    
    // ‡∏ï‡∏±‡πâ‡∏á timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    inactivityUpdateTimerRef.current = setInterval(() => {
      sendInactivityBatch();
    }, 30000);
    
    return () => {
      if (inactivityUpdateTimerRef.current) {
        clearInterval(inactivityUpdateTimerRef.current);
      }
    };
  }, [sendInactivityBatch]);

  useEffect(() => {
    const handlePageChange = (event) => {
      const newPageId = event.detail.pageId;
      setSelectedPage(newPageId);
    };

    window.addEventListener('pageChanged', handlePageChange);
    
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
      setSelectedPage(savedPage);
    }

    fetchPages()
      .then(setPages)
      .catch(err => console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ:", err));

    if (Notification.permission === "default") {
      Notification.requestPermission();
    }

    return () => {
      window.removeEventListener('pageChanged', handlePageChange);
    };
  }, []);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const pageIdFromURL = urlParams.get("page_id");
    if (pageIdFromURL) {
      setPageId(pageIdFromURL);
    }
  }, []);

  useEffect(() => {
    if (selectedPage) {
      Promise.all([
        loadMessages(selectedPage),
        loadConversations(selectedPage)
      ]).catch(err => console.error("Error loading data:", err));
    } else {
      setDefaultMessages([]);
      setConversations([]);
    }
  }, [selectedPage]);

  const loadMessages = async (pageId) => {
    const cached = getCachedData(`messages_${pageId}`, messageCache);
    if (cached) {
      setDefaultMessages(cached);
      return cached;
    }

    try {
      const data = await getMessagesBySetId(pageId);
      const messages = Array.isArray(data) ? data : [];
      setDefaultMessages(messages);
      setCachedData(`messages_${pageId}`, messages, messageCache);
      return messages;
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      setDefaultMessages([]);
      return [];
    }
  };

  useEffect(() => {
    clockIntervalRef.current = setInterval(() => {
      setCurrentTime(new Date()); //   ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }, 1000);

    return () => {
      if (clockIntervalRef.current) clearInterval(clockIntervalRef.current);
    };
  }, []);


////////// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î conversations ‡∏à‡∏≤‡∏Å database ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á poll) /////////
const loadConversations = async (pageId) => {
  if (!pageId) return;

  setLoading(true);
  try {
    const conversations = await fetchConversations(pageId);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å database
    console.log('üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    setConversations(conversations);
    setAllConversations(conversations);
    setLastUpdateTime(new Date());
    
    // Reset filters
    setDisappearTime("");
    setCustomerType("");
    setPlatformType("");
    setMiningStatus("");
    setStartDate("");
    setEndDate("");
    setFilteredConversations([]);
    setSelectedConversationIds([]);
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
    if (err.response?.status === 400) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    } else {
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message || err}`);
    }
  } finally {
    setLoading(false);
  }
};

//////////////////////////////////////////////////////////////////////////////

// Auto refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å database ‡∏ó‡∏µ‡πà sync ‡πÅ‡∏•‡πâ‡∏ß)
useEffect(() => {
  if (selectedPage) {
    const interval = setInterval(() => {
      loadConversations(selectedPage);
    }, 15000); // refresh ‡∏ó‡∏∏‡∏Å  15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }
}, [selectedPage]);

///////////////////////////////////////////////////////////////////////////////

  const applyFilters = () => {
    let filtered = [...allConversations];

    if (disappearTime) {
      const now = new Date();
      filtered = filtered.filter(conv => {
        const referenceTime = conv.last_user_message_time || conv.updated_time;
        if (!referenceTime) return false;

        const updated = new Date(referenceTime);
        const diffDays = (now - updated) / (1000 * 60 * 60 * 24);

        switch (disappearTime) {
          case '1d': return diffDays <= 1;
          case '3d': return diffDays <= 3;
          case '7d': return diffDays <= 7;
          case '1m': return diffDays <= 30;
          case '3m': return diffDays <= 90;
          case '6m': return diffDays <= 180;
          case '1y': return diffDays <= 365;
          case 'over1y': return diffDays > 365;
          default: return true;
        }
      });
    }

    if (customerType) {
      filtered = filtered.filter(conv => conv.customerType === customerType);
    }

    if (platformType) {
      filtered = filtered.filter(conv => conv.platform === platformType);
    }

    if (miningStatus) {
      filtered = filtered.filter(conv => conv.miningStatus === miningStatus);
    }

    if (startDate) {
      const start = new Date(startDate);
      filtered = filtered.filter(conv => new Date(conv.created_time) >= start);
    }
    if (endDate) {
      const end = new Date(endDate);
      filtered = filtered.filter(conv => new Date(conv.created_time) <= end);
    }

    setFilteredConversations(filtered);
  };

  const toggleCheckbox = useCallback((conversationId) => {
    setSelectedConversationIds((prev) =>
      prev.includes(conversationId)
        ? prev.filter((id) => id !== conversationId)
        : [...prev, conversationId]
    );
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å users ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
  const selectUsersFromFile = (userNames) => {
    const conversationsToSelect = displayData.filter(conv => {
      const userName = conv.user_name || conv.conversation_name || '';
      return userNames.some(name => 
        userName.toLowerCase().includes(name.toLowerCase()) ||
        name.toLowerCase().includes(userName.toLowerCase())
      );
    });

    const conversationIds = conversationsToSelect.map(conv => conv.conversation_id);
    setSelectedConversationIds(prev => {
      const newIds = [...new Set([...prev, ...conversationIds])];
      return newIds;
    });

    showSuccessNotification(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ${conversationsToSelect.length} ‡∏à‡∏≤‡∏Å ${userNames.length} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå`);
  };

  const handOpenPopup = () => {
    setIsPopupOpen(true);
  };

  const handleClosePopup = () => {
    setIsPopupOpen(false);
  };

  const sendMessagesBySelectedSets = async (messageSetIds) => {
    if (!Array.isArray(messageSetIds) || selectedConversationIds.length === 0) {
      return;
    }

    try {
      let successCount = 0;
      let failCount = 0;

      const notification = document.createElement('div');
      notification.className = 'send-notification';
      notification.innerHTML = `
        <div class="notification-content">
          <div class="notification-icon">üöÄ</div>
          <div class="notification-text">
            <strong>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...</strong>
            <span>‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${selectedConversationIds.length} ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤</span>
          </div>
        </div>
      `;
      document.body.appendChild(notification);

      for (const conversationId of selectedConversationIds) {
        const selectedConv = displayData.find(conv => conv.conversation_id === conversationId);
        const psid = selectedConv?.raw_psid;

        if (!psid) {
          failCount++;
          continue;
        }

        try {
          for (const setId of messageSetIds) {
            const response = await fetch(`http://localhost:8000/custom_messages/${setId}`);
            if (!response.ok) continue;
            
            const messages = await response.json();
            const sortedMessages = messages.sort((a, b) => a.display_order - b.display_order);

            for (const messageObj of sortedMessages) {
              let messageContent = messageObj.content;

              if (messageObj.message_type === "image") {
                messageContent = `http://localhost:8000/images/${messageContent.replace('[IMAGE] ', '')}`;
              } else if (messageObj.message_type === "video") {
                messageContent = `http://localhost:8000/videos/${messageContent.replace('[VIDEO] ', '')}`;
              }

              // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° parameter is_system_message
              await fetch(`http://localhost:8000/send/${selectedPage}/${psid}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ 
                  message: messageContent,
                  type: messageObj.message_type,
                  is_system_message: true  // üî• ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                }),
              });

              await new Promise(resolve => setTimeout(resolve, 500));
            }

            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          
          successCount++;
        } catch (err) {
          console.error(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${conversationId}:`, err);
          failCount++;
        }
      }

      notification.remove();

      if (successCount > 0) {   
        showSuccessNotification(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤`);
        setSelectedConversationIds([]);
        
        // üî• ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ refresh ‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last_interaction_at
      } else {
        showErrorNotification(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${failCount} ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤`);
      }
      
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°");
    }
  };

  const showSuccessNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚úÖ</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const showErrorNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚ùå</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const getUpdateStatus = () => {
    const diffMs = currentTime - lastUpdateTime;
    const diffMin = Math.floor(diffMs / 60000);
    
    if (diffMin < 1) return { status: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", color: "success" };
    if (diffMin < 5) return { status: `${diffMin} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`, color: "warning" };
    return { status: `${diffMin} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`, color: "danger" };
  };

  const handleConfirmPopup = (checkedSetIds) => {
    setSelectedMessageSetIds(checkedSetIds);
    setIsPopupOpen(false);
    
    sendMessagesBySelectedSets(checkedSetIds);
  };

  const updateStatus = getUpdateStatus();
  const selectedPageInfo = pages.find(p => p.id === selectedPage);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clear filter
  const handleClearDateFilter = () => {
    setSyncDateRange(null);
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà
    loadConversations(selectedPage);
  };

  return (
    <div className="app-container">
      <Sidebar />

      <main className="main-dashboard">
        {/* Hero Section */}
        <div className="dashboard-hero">
          <div className="hero-content">
            <h1 className="hero-title">
              <span className="title-icon">‚õèÔ∏è</span>
              ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            </h1>
            <p className="hero-subtitle">
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            </p>
          </div>
        </div>

        {/* Customer Statistics */}
        <CustomerStatistics selectedPage={selectedPage} />

        {/* Connection Status Bar */}
        <div className="connection-status-bar">
          <div className="status-left">
            <div className={`connection-badge ${selectedPage ? 'connected' : 'disconnected'}`}>
              <span className="status-icon">{selectedPage ? 'üü¢' : 'üî¥'}</span>
              <span className="status-text">
                {selectedPage ? `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: ${selectedPageInfo?.name}` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
              </span>
            </div>
            <div className={`update-badge ${updateStatus.color}`}>
              <span className="update-icon">üîÑ</span>
              <span className="update-text">{updateStatus.status}</span>
            </div>
            
            {/* Sync Button */}
            {selectedPage && (
              <SyncCustomersButton 
                selectedPage={selectedPage}
                onSyncComplete={(dateRange) => {
                  setSyncDateRange(dateRange);
                  loadConversations(selectedPage);
                }}
              />
            )}

            {/* Date Filter Badge */}
            <DateFilterBadge 
              dateRange={syncDateRange}
              onClear={handleClearDateFilter}
            />
          </div>
          <div className="status-right">
            <span className="clock-display">
              üïê {currentTime.toLocaleTimeString('th-TH')}
            </span>
          </div>
        </div>

        {/* File Upload Section */}
        <FileUploadSection 
          onSelectUsers={selectUsersFromFile} 
          onClearSelection={() => setSelectedConversationIds([])} 
        />

        {/* Filter Section */}
        <div className="filter-section">
          <button
            className="filter-toggle-btn"
            onClick={() => setShowFilter(prev => !prev)}
          >
            <span className="btn-icon">üîç</span>
            <span>‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</span>
            <span className={`toggle-arrow ${showFilter ? 'open' : ''}`}>‚ñº</span>
          </button>

          {showFilter && (
            <div className="filter-panel">
              <div className="filter-grid">
                <div className="filter-group">
                  <label className="filter-label">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</label>
                  <select
                    className="filter-select"
                    value={disappearTime}
                    onChange={(e) => setDisappearTime(e.target.value)}
                  >
                    <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                    <option value="1d">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô</option>
                    <option value="3d">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô</option>
                    <option value="7d">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</option>
                    <option value="1m">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                    <option value="3m">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                    <option value="6m">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                    <option value="1y">‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏õ‡∏µ</option>
                    <option value="over1y">‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ</option>
                  </select>
                </div>

                <div className="filter-group">
                  <label className="filter-label">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</label>
                  <select
                    className="filter-select"
                    value={customerType}
                    onChange={(e) => setCustomerType(e.target.value)}
                  >
                    <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                    <option value="newCM">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</option>
                    <option value="intrestCM">‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏π‡∏á</option>
                    <option value="dealDoneCM">‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</option>
                    <option value="exCM">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤</option>
                  </select>
                </div>

                <div className="filter-group">
                  <label className="filter-label">Platform</label>
                  <select
                    className="filter-select"
                    value={platformType}
                    onChange={(e) => setPlatformType(e.target.value)}
                  >
                    <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                    <option value="FB">Facebook</option>
                    <option value="Line">Line</option>
                  </select>
                </div>

                <div className="filter-group">
                  <label className="filter-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î</label>
                  <select
                    className="filter-select"
                    value={miningStatus}
                    onChange={(e) => setMiningStatus(e.target.value)}
                  >
                    <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                    <option value="0Mining">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∏‡∏î</option>
                    <option value="Mining">‡∏Ç‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß</option>
                    <option value="returnCM">‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</option>
                  </select>
                </div>

                <div className="filter-group date-range">
                  <label className="filter-label">‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
                  <div className="date-inputs">
                    <input
                      type="date"
                      className="filter-input date-input"
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                      placeholder="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
                    />
                    <span className="date-separator">‡∏ñ‡∏∂‡∏á</span>
                    <input
                      type="date"
                      className="filter-input date-input"
                      value={endDate}
                      onChange={(e) => setEndDate(e.target.value)}
                      placeholder="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
                    />
                  </div>
                </div>
              </div>

              <div className="filter-actions">
                <button onClick={applyFilters} className="apply-filter-btn">
                  <span className="btn-icon">‚ú®</span>
                  ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </button>
                <button onClick={() => {
                  setFilteredConversations([]);
                  setDisappearTime("");
                  setCustomerType("");
                  setPlatformType("");
                  setMiningStatus("");
                  setStartDate("");
                  setEndDate("");
                }} className="clear-filter-btn">
                  <span className="btn-icon">üóëÔ∏è</span>
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Alert Messages */}
        {!selectedPage && (
          <div className="alert alert-warning">
            <div className="alert-icon">‚ö†Ô∏è</div>
            <div className="alert-content">
              <strong>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à Facebook</strong>
              <p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
            </div>
          </div>
        )}

        {selectedPage && conversations.length === 0 && !loading && (
          <div className="alert alert-info">
            <div className="alert-icon">‚ÑπÔ∏è</div>
            <div className="alert-content">
              <strong>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤</strong>
              <p>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>
            </div>
          </div>
        )}

        {filteredConversations.length > 0 && (
          <div className="alert alert-success">
            <div className="alert-icon">üîç</div>
            <div className="alert-content">
              <strong>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á</strong>
              <p>‡∏û‡∏ö {filteredConversations.length} ‡∏à‡∏≤‡∏Å {allConversations.length} ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤</p>
            </div>
          </div>
        )}

        {/* Main Content Area */}
        <div className="content-area">
          {loading ? (
            <div className="loading-container">
              <div className="loading-spinner"></div>
              <p className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
            </div>
          ) : displayData.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">üì≠</div>
              <h3 className="empty-title">
                {selectedPage ? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤" : "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
              </h3>
             
             
            </div>
          ) : (
            <div className="table-container">
              <table className="modern-table">
                <thead>
                  <tr>
                    <th className="th-number">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th className="th-user">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                    <th className="th-date">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤</th>
                    <th className="th-time">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢</th>
                   
                    <th className="th-product">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à</th>
                    <th className="th-platform">Platform</th>
                    <th className="th-type">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                    <th className="th-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏∏‡∏î</th>
                    <th className="th-select">
                      <label className="select-all-checkbox">
                        <input
                          type="checkbox"
                          checked={selectedConversationIds.length === displayData.length && displayData.length > 0}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedConversationIds(displayData.map(conv => conv.conversation_id));
                            } else {
                              setSelectedConversationIds([]);
                            }
                          }}
                        />
                        <span className="checkbox-mark"></span>
                      </label>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {displayData.map((conv, idx) => (
                    <ConversationRow
                      key={conv.conversation_id || idx}
                      conv={conv}
                      idx={idx}
                      isSelected={selectedConversationIds.includes(conv.conversation_id)}
                      onToggleCheckbox={toggleCheckbox}
                      onInactivityChange={handleInactivityChange}
                    />
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Action Bar */}
        <div className="action-bar">
          <div className="action-left">
            <button
              onClick={handOpenPopup}
              className={`action-btn primary ${selectedConversationIds.length > 0 ? 'active' : ''}`} style={{paddingRight:"30%" }}
              disabled={loading || selectedConversationIds.length === 0}
            >
              <span className="btn-icon">‚õèÔ∏è</span>
              <span>‡∏Ç‡∏∏‡∏î</span>
            </button>

            <button 
              onClick={handleloadConversations} 
              className="action-btn secondary"  style={{paddingRight:"30%"}}
              disabled={loading || !selectedPage}
            >
              <span className={`btn-icon ${loading ? 'spinning' : ''}`} >üîÑ</span>
              <span>{loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..." : "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä"}</span>
            </button>
          </div>

          <div className="action-right">
            <div className="selection-summary">
              <span className="summary-icon">üìä</span>
              <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedConversationIds.length} ‡∏à‡∏≤‡∏Å {displayData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
            </div>
          </div>
        </div>

        {/* Popup */}
        {isPopupOpen && (
          <Popup
            selectedPage={selectedPage}
            onClose={handleClosePopup}
            defaultMessages={defaultMessages}
            onConfirm={handleConfirmPopup}
            count={selectedConversationIds.length}
          />
        )}

        
      </main>
    </div>
  );
}

export default App;