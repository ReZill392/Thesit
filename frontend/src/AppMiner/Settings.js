import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../CSS/Settings.css';
import { fetchPages, connectFacebook } from "../Features/Tool";
import Sidebar from "./Sidebar"; 

function Settings() {
  const [pages, setPages] = useState([]);
  const [selectedPage, setSelectedPage] = useState("");
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [showMessage, setShowMessage] = useState({ type: '', text: '', show: false });
  
  // Settings States
  const [settings, setSettings] = useState(() => {
    const savedSettings = localStorage.getItem('appSettings');
    return savedSettings ? JSON.parse(savedSettings) : {
      // General Settings
      language: 'th',
      theme: 'light',
      fontSize: 'medium',
      primaryColor: '#667eea',
      
      // Notification Settings
      enableNotifications: true,
      notificationSound: true,
      desktopNotifications: true,
      emailNotifications: false,
      notificationVolume: 70,
      
      // Auto-send Settings
      autoSendEnabled: false,
      autoSendDelay: 5,
      autoSendLimit: 100,
      batchSize: 10,
      
      // Message Settings
      defaultMessageDelay: 1000,
      typingIndicator: true,
      readReceipts: true,
      messagePreview: true,
      
      // Display Settings
      compactMode: false,
      showTimestamps: true,
      showAvatars: true,
      animationsEnabled: true,
      sidebarPosition: 'left',
      
      // Data Settings
      autoRefreshInterval: 30,
      cacheEnabled: true,
      cacheDuration: 300,
      dataRetention: 30,
      
      // Privacy Settings
      saveHistory: true,
      anonymousMode: false,
      shareAnalytics: true,
      
      // Advanced Settings
      debugMode: false,
      apiTimeout: 30000,
      maxRetries: 3,
      logLevel: 'error'
    };
  });

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    localStorage.setItem('appSettings', JSON.stringify(settings));
    applySettings(settings);
  }, [settings]);

  // Apply settings to the app
  const applySettings = (newSettings) => {
    // Theme
    document.documentElement.setAttribute('data-theme', newSettings.theme);
    
    // Font Size - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ä‡πâ class ‡πÅ‡∏ó‡∏ô
    document.body.classList.remove('font-size-small', 'font-size-medium', 'font-size-large', 'font-size-xlarge');
    document.body.classList.add(`font-size-${newSettings.fontSize}`);
    
    // Primary Color
    document.documentElement.style.setProperty('--primary-color', newSettings.primaryColor);
    
    // Language
    document.documentElement.setAttribute('lang', newSettings.language);
    
    // Compact Mode
    if (newSettings.compactMode) {
      document.body.classList.add('compact-mode');
    } else {
      document.body.classList.remove('compact-mode');
    }
    
    // Animations
    if (!newSettings.animationsEnabled) {
      document.body.classList.add('no-animations');
    } else {
      document.body.classList.remove('no-animations');
    }
  };

  useEffect(() => {
    const loadPages = async () => {
      try {
        const pagesData = await fetchPages();
        setPages(pagesData);
        
        const savedPage = localStorage.getItem("selectedPage");
        if (savedPage && pagesData.some(page => page.id === savedPage)) {
          setSelectedPage(savedPage);
        }
      } catch (err) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ:", err);
      }
    };
    
    loadPages();
  }, []);

  // Listen for page changes from Sidebar
  useEffect(() => {
    const handlePageChange = (event) => {
      const pageId = event.detail.pageId;
      setSelectedPage(pageId);
    };

    window.addEventListener('pageChanged', handlePageChange);
    
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
      setSelectedPage(savedPage);
    }

    return () => {
      window.removeEventListener('pageChanged', handlePageChange);
    };
  }, []);

  const handlePageChange = (e) => {
    const pageId = e.target.value;
    setSelectedPage(pageId);
    localStorage.setItem("selectedPage", pageId);
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const updateSetting = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const showNotification = (type, text) => {
    setShowMessage({ type, text, show: true });
    setTimeout(() => {
      setShowMessage({ type: '', text: '', show: false });
    }, 3000);
  };

  const saveSettings = () => {
    localStorage.setItem('appSettings', JSON.stringify(settings));
    showNotification('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
  };

  const resetSettings = () => {
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      localStorage.removeItem('appSettings');
      window.location.reload();
    }
  };



  return (
    <div className="app-container">
       <Sidebar />

       
      {/* Main Settings Content */}
      <div className="settings-container">
        <div className="settings-header">
          <h1 className="settings-title">
            <span className="title-icon">‚öôÔ∏è</span>
            ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
          </h1>
          <p className="settings-subtitle">
            ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          </p>
        </div>

        <div className="settings-sections">
          {/* General Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üåê</span>
              <div>
                <h2 className="section-title">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h2>
                <p className="section-description">‡∏†‡∏≤‡∏©‡∏≤, ‡∏ò‡∏µ‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏†‡∏≤‡∏©‡∏≤</div>
                  <div className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <select 
                    className="setting-select"
                    value={settings.language}
                    onChange={(e) => updateSetting('language', e.target.value)}
                  >
                    <option value="th">‡πÑ‡∏ó‡∏¢</option>
                    <option value="en">English</option>
                  </select>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏ò‡∏µ‡∏°‡∏™‡∏µ</div>
                  <div className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <div className="theme-preview">
                    <div 
                      className={`theme-option ${settings.theme === 'light' ? 'selected' : ''}`}
                      onClick={() => updateSetting('theme', 'light')}
                    >
                      <div className="theme-icon">‚òÄÔ∏è</div>
                      <div className="theme-name">‡∏™‡∏ß‡πà‡∏≤‡∏á</div>
                    </div>
                    <div 
                      className={`theme-option ${settings.theme === 'dark' ? 'selected' : ''}`}
                      onClick={() => updateSetting('theme', 'dark')}
                    >
                      <div className="theme-icon">üåô</div>
                      <div className="theme-name">‡∏°‡∏∑‡∏î</div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</div>
                  <div className="setting-description">‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <select 
                    className="setting-select"
                    value={settings.fontSize}
                    onChange={(e) => updateSetting('fontSize', e.target.value)}
                  >
                    <option value="small">‡πÄ‡∏•‡πá‡∏Å</option>
                    <option value="medium">‡∏õ‡∏Å‡∏ï‡∏¥</option>
                    <option value="large">‡πÉ‡∏´‡∏ç‡πà</option>
                    <option value="xlarge">‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å</option>
                  </select>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</div>
                  <div className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <div className="color-picker-group">
                    <div 
                      className={`color-option ${settings.primaryColor === '#667eea' ? 'selected' : ''}`}
                      style={{ backgroundColor: '#667eea' }}
                      onClick={() => updateSetting('primaryColor', '#667eea')}
                    />
                    <div 
                      className={`color-option ${settings.primaryColor === '#3182ce' ? 'selected' : ''}`}
                      style={{ backgroundColor: '#3182ce' }}
                      onClick={() => updateSetting('primaryColor', '#3182ce')}
                    />
                    <div 
                      className={`color-option ${settings.primaryColor === '#48bb78' ? 'selected' : ''}`}
                      style={{ backgroundColor: '#48bb78' }}
                      onClick={() => updateSetting('primaryColor', '#48bb78')}
                    />
                    <div 
                      className={`color-option ${settings.primaryColor === '#ed8936' ? 'selected' : ''}`}
                      style={{ backgroundColor: '#ed8936' }}
                      onClick={() => updateSetting('primaryColor', '#ed8936')}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Notification Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üîî</span>
              <div>
                <h2 className="section-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
                <p className="section-description">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>
                  <div className="setting-description">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.enableNotifications ? 'active' : ''}`}
                    onClick={() => updateSetting('enableNotifications', !settings.enableNotifications)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>
                  <div className="setting-description">‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.notificationSound ? 'active' : ''}`}
                    onClick={() => updateSetting('notificationSound', !settings.notificationSound)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á</div>
                  <div className="setting-description">‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.notificationVolume}
                    onChange={(e) => updateSetting('notificationVolume', parseInt(e.target.value))}
                    min="0"
                    max="100"
                  />
                  <span className="setting-unit">%</span>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.desktopNotifications ? 'active' : ''}`}
                    onClick={() => updateSetting('desktopNotifications', !settings.desktopNotifications)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>
                  <div className="setting-description">‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.emailNotifications ? 'active' : ''}`}
                    onClick={() => updateSetting('emailNotifications', !settings.emailNotifications)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Auto-send Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üöÄ</span>
              <div>
                <h2 className="section-title">‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</h2>
                <p className="section-description">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</div>
                  <div className="setting-description">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.autoSendEnabled ? 'active' : ''}`}
                    onClick={() => updateSetting('autoSendEnabled', !settings.autoSendEnabled)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
                  <div className="setting-description">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.autoSendDelay}
                    onChange={(e) => updateSetting('autoSendDelay', parseInt(e.target.value))}
                    min="1"
                    max="60"
                  />
                  <span className="setting-unit">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</div>
                  <div className="setting-description">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.autoSendLimit}
                    onChange={(e) => updateSetting('autoSendLimit', parseInt(e.target.value))}
                    min="1"
                    max="1000"
                  />
                  <span className="setting-unit">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</span>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö</div>
                  <div className="setting-description">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.batchSize}
                    onChange={(e) => updateSetting('batchSize', parseInt(e.target.value))}
                    min="1"
                    max="50"
                  />
                  <span className="setting-unit">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</span>
                </div>
              </div>
            </div>
          </div>

          {/* Display Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üé®</span>
              <div>
                <h2 className="section-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•</h2>
                <p className="section-description">‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.compactMode ? 'active' : ''}`}
                    onClick={() => updateSetting('compactMode', !settings.compactMode)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.showTimestamps ? 'active' : ''}`}
                    onClick={() => updateSetting('showTimestamps', !settings.showTimestamps)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.showAvatars ? 'active' : ''}`}
                    onClick={() => updateSetting('showAvatars', !settings.showAvatars)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.animationsEnabled ? 'active' : ''}`}
                    onClick={() => updateSetting('animationsEnabled', !settings.animationsEnabled)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Data & Privacy Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üîê</span>
              <div>
                <h2 className="section-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
                <p className="section-description">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</div>
                  <div className="setting-description">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.saveHistory ? 'active' : ''}`}
                    onClick={() => updateSetting('saveHistory', !settings.saveHistory)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô</div>
                  <div className="setting-description">‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.anonymousMode ? 'active' : ''}`}
                    onClick={() => updateSetting('anonymousMode', !settings.anonymousMode)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                  <div className="setting-description">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.dataRetention}
                    onChange={(e) => updateSetting('dataRetention', parseInt(e.target.value))}
                    min="1"
                    max="365"
                  />
                  <span className="setting-unit">‡∏ß‡∏±‡∏ô</span>
                </div>
              </div>
            </div>
          </div>

          {/* Advanced Settings */}
          <div className="settings-section">
            <div className="section-header">
              <span className="section-icon">üõ†Ô∏è</span>
              <div>
                <h2 className="section-title">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</h2>
                <p className="section-description">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≥‡∏ô‡∏≤‡∏ç</p>
              </div>
            </div>
            
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏µ‡∏ö‡∏±‡∏Å</div>
                  <div className="setting-description">‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤</div>
                </div>
                <div className="setting-control">
                  <div 
                    className={`toggle-switch ${settings.debugMode ? 'active' : ''}`}
                    onClick={() => updateSetting('debugMode', !settings.debugMode)}
                  >
                    <div className="toggle-slider" />
                  </div>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">API Timeout</div>
                  <div className="setting-description">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏à‡∏≤‡∏Å API</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.apiTimeout / 1000}
                    onChange={(e) => updateSetting('apiTimeout', parseInt(e.target.value) * 1000)}
                    min="10"
                    max="120"
                  />
                  <span className="setting-unit">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>
                  <div className="setting-description">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</div>
                </div>
                <div className="setting-control">
                  <input 
                    type="number"
                    className="setting-number"
                    value={settings.maxRetries}
                    onChange={(e) => updateSetting('maxRetries', parseInt(e.target.value))}
                    min="0"
                    max="10"
                  />
                  <span className="setting-unit">‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                </div>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <div className="setting-label">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log</div>
                  <div className="setting-description">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</div>
                </div>
                <div className="setting-control">
                  <select 
                    className="setting-select"
                    value={settings.logLevel}
                    onChange={(e) => updateSetting('logLevel', e.target.value)}
                  >
                    <option value="error">Error</option>
                    <option value="warning">Warning</option>
                    <option value="info">Info</option>
                    <option value="debug">Debug</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="settings-actions">
          <button onClick={saveSettings} className="action-btn save-btn">
            üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
          </button>
          <button onClick={resetSettings} className="action-btn reset-btn">
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          </button>
         
        </div>

        {/* Toast Message */}
        {showMessage.show && (
          <div className={`message-toast message-${showMessage.type}`}>
            {showMessage.text}
          </div>
        )}
      </div>
    </div>
  );
}

export default Settings;