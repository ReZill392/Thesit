import React, { useState, useEffect } from 'react';
import '../CSS/Settings.css';
import Sidebar from "./Sidebar"; 

function Settings() {
  const [activeTab, setActiveTab] = useState('general');
  const [showSaveNotification, setShowSaveNotification] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // Settings States
  const [settings, setSettings] = useState(() => {
    const savedSettings = localStorage.getItem('appSettings');
    return savedSettings ? JSON.parse(savedSettings) : {
      // General Settings
      language: 'th',
      theme: 'light',
      fontSize: 'medium',
      primaryColor: '#667eea',
      accentColor: '#48bb78',
      
      // Display Settings
      sidebarPosition: 'left',
      sidebarWidth: 'normal',
      compactMode: false,
      showTimestamps: true,
      showAvatars: true,
      animationsEnabled: true,
      highContrast: false,
      
      // Notification Settings
      enableNotifications: true,
      notificationSound: true,
      desktopNotifications: true,
      emailNotifications: false,
      notificationVolume: 70,
      notificationPosition: 'top-right',
      
      // Message Settings
      autoSendEnabled: false,
      autoSendDelay: 5,
      autoSendLimit: 100,
      batchSize: 10,
      messagePreview: true,
      typingIndicator: true,
      readReceipts: true,
      
      // Performance Settings
      autoRefreshInterval: 30,
      cacheEnabled: true,
      cacheDuration: 300,
      lazyLoading: true,
      preloadImages: true,
      
      // Privacy Settings
      saveHistory: true,
      anonymousMode: false,
      shareAnalytics: true,
      dataRetention: 30,
      
      // Accessibility
      keyboardShortcuts: true,
      screenReaderMode: false,
      focusIndicator: true,
      reduceMotion: false,
      
      // Advanced Settings
      debugMode: false,
      apiTimeout: 30000,
      maxRetries: 3,
      logLevel: 'error',
      experimentalFeatures: false
    };
  });

  // Theme presets
  const themePresets = {
    light: {
      name: '‡∏™‡∏ß‡πà‡∏≤‡∏á',
      icon: '‚òÄÔ∏è',
      colors: {
        bg: '#ffffff',
        text: '#2d3748',
        border: '#e2e8f0'
      }
    },
    dark: {
      name: '‡∏°‡∏∑‡∏î',
      icon: 'üåô',
      colors: {
        bg: '#1a202c',
        text: '#e2e8f0',
        border: '#4a5568'
      }
    },
    auto: {
      name: '‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
      icon: 'üåì',
      colors: null
    }
  };

  // Color presets
  const colorPresets = [
    { name: 'Violet', value: '#667eea' },
    { name: 'Blue', value: '#3182ce' },
    { name: 'Green', value: '#48bb78' },
    { name: 'Orange', value: '#ed8936' },
    { name: 'Pink', value: '#ed64a6' },
    { name: 'Teal', value: '#38b2ac' },
    { name: 'Red', value: '#e53e3e' },
    { name: 'Gray', value: '#718096' }
  ];

  // Font size presets
  const fontSizes = {
    small: { label: '‡πÄ‡∏•‡πá‡∏Å', value: '12px', scale: 0.875 },
    medium: { label: '‡∏õ‡∏Å‡∏ï‡∏¥', value: '14px', scale: 1 },
    large: { label: '‡πÉ‡∏´‡∏ç‡πà', value: '16px', scale: 1.125 },
    xlarge: { label: '‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å', value: '18px', scale: 1.25 }
  };

  // Apply settings to DOM
  const applySettings = (newSettings) => {
    const root = document.documentElement;
    const body = document.body;
    
    // Theme
    root.setAttribute('data-theme', newSettings.theme);
    
    // Colors
    root.style.setProperty('--primary-color', newSettings.primaryColor);
    root.style.setProperty('--accent-color', newSettings.accentColor);
    
    // Font Size
    const fontSize = fontSizes[newSettings.fontSize];
    root.style.setProperty('--base-font-size', fontSize.value);
    root.style.setProperty('--font-scale', fontSize.scale);
    body.className = body.className.replace(/font-size-\w+/, '');
    body.classList.add(`font-size-${newSettings.fontSize}`);
    
    // Compact Mode
    body.classList.toggle('compact-mode', newSettings.compactMode);
    
    // Animations
    body.classList.toggle('no-animations', !newSettings.animationsEnabled);
    body.classList.toggle('reduce-motion', newSettings.reduceMotion);
    
    // High Contrast
    body.classList.toggle('high-contrast', newSettings.highContrast);
    
    // Sidebar Position
    body.classList.toggle('sidebar-right', newSettings.sidebarPosition === 'right');
    
    // Sidebar Width
    root.style.setProperty('--sidebar-width', 
      newSettings.sidebarWidth === 'narrow' ? '200px' : 
      newSettings.sidebarWidth === 'wide' ? '300px' : '250px'
    );
    
    // Language
    root.setAttribute('lang', newSettings.language);
  };

  // Save settings
  useEffect(() => {
    localStorage.setItem('appSettings', JSON.stringify(settings));
    applySettings(settings);
  }, [settings]);

  // Update setting
  const updateSetting = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
    setHasUnsavedChanges(true);
  };

  // Save all settings
  const saveSettings = () => {
    localStorage.setItem('appSettings', JSON.stringify(settings));
    setShowSaveNotification(true);
    setHasUnsavedChanges(false);
    setTimeout(() => setShowSaveNotification(false), 3000);
  };

  // Reset settings
  const resetSettings = () => {
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      localStorage.removeItem('appSettings');
      window.location.reload();
    }
  };

  // Export settings
  const exportSettings = () => {
    const dataStr = JSON.stringify(settings, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = `settings_${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  // Import settings
  const importSettings = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const importedSettings = JSON.parse(e.target.result);
          setSettings(importedSettings);
          saveSettings();
        } catch (error) {
          alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ');
        }
      };
      reader.readAsText(file);
    }
  };

  // Tab content renderer
  const renderTabContent = () => {
    switch(activeTab) {
      case 'general':
        return <GeneralSettings settings={settings} updateSetting={updateSetting} />;
      case 'display':
        return <DisplaySettings settings={settings} updateSetting={updateSetting} />;
      case 'notifications':
        return <NotificationSettings settings={settings} updateSetting={updateSetting} />;
      case 'messages':
        return <MessageSettings settings={settings} updateSetting={updateSetting} />;
      case 'performance':
        return <PerformanceSettings settings={settings} updateSetting={updateSetting} />;
      case 'privacy':
        return <PrivacySettings settings={settings} updateSetting={updateSetting} />;
      case 'accessibility':
        return <AccessibilitySettings settings={settings} updateSetting={updateSetting} />;
      case 'advanced':
        return <AdvancedSettings settings={settings} updateSetting={updateSetting} />;
      default:
        return null;
    }
  };

  return (
    <div className="settings-page" style={{marginLeft:"70px"}}>
      <Sidebar />
      <div className="settings-container">
        <div className="settings-header">
          <h1 className="settings-title">
            <span className="title-icon">‚öôÔ∏è</span>
            ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
          </h1>
          {hasUnsavedChanges && (
            <span className="unsaved-indicator">‚Ä¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</span>
          )}
        </div>

        <div className="settings-tabs">
          <button 
            className={`tab-btn ${activeTab === 'general' ? 'active' : ''}`}
            onClick={() => setActiveTab('general')}
          >
            üåê ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
          </button>
          <button 
            className={`tab-btn ${activeTab === 'display' ? 'active' : ''}`}
            onClick={() => setActiveTab('display')}
          >
            üé® ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
          </button>
          <button 
            className={`tab-btn ${activeTab === 'notifications' ? 'active' : ''}`}
            onClick={() => setActiveTab('notifications')}
          >
            üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          </button>
          <button 
            className={`tab-btn ${activeTab === 'messages' ? 'active' : ''}`}
            onClick={() => setActiveTab('messages')}
          >
            üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </button>
          <button 
            className={`tab-btn ${activeTab === 'performance' ? 'active' : ''}`}
            onClick={() => setActiveTab('performance')}
          >
            ‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
          </button>
          <button 
            className={`tab-btn ${activeTab === 'privacy' ? 'active' : ''}`}
            onClick={() => setActiveTab('privacy')}
          >
            üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
          </button>
          <button 
            className={`tab-btn ${activeTab === 'accessibility' ? 'active' : ''}`}
            onClick={() => setActiveTab('accessibility')}
          >
            ‚ôø ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
          </button>
          <button 
            className={`tab-btn ${activeTab === 'advanced' ? 'active' : ''}`}
            onClick={() => setActiveTab('advanced')}
          >
            üõ†Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
          </button>
        </div>

        <div className="settings-content">
          {renderTabContent()}
        </div>

        <div className="settings-footer">
          <div className="footer-left">
            <button onClick={exportSettings} className="btn-secondary">
              üì• Export ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
            <label className="btn-secondary">
              üì§ Import ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
              <input 
                type="file" 
                accept=".json"
                onChange={importSettings}
                style={{ display: 'none' }}
              />
            </label>
          </div>
          <div className="footer-right">
            <button onClick={resetSettings} className="btn-danger">
              üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <button onClick={saveSettings} className="btn-primary">
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
          </div>
        </div>
      </div>

      {showSaveNotification && (
        <div className="notification-toast success">
          ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
        </div>
      )}
    </div>
  );
}

// General Settings Component
const GeneralSettings = ({ settings, updateSetting }) => {
  const colorPresets = [
    { name: 'Violet', value: '#667eea' },
    { name: 'Blue', value: '#3182ce' },
    { name: 'Green', value: '#48bb78' },
    { name: 'Orange', value: '#ed8936' },
    { name: 'Pink', value: '#ed64a6' },
    { name: 'Teal', value: '#38b2ac' }
  ];

  return (
    <div className="settings-section" >
      <h2 className="section-title">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h2>
      
      <div className="setting-group">
        <label className="setting-label">‡∏†‡∏≤‡∏©‡∏≤</label>
        <select 
          value={settings.language}
          onChange={(e) => updateSetting('language', e.target.value)}
          className="setting-select"
        >
          <option value="th">‡πÑ‡∏ó‡∏¢</option>
          <option value="en">English</option>
        </select>
      </div>

      <div className="setting-group">
        <label className="setting-label">‡∏ò‡∏µ‡∏°‡∏™‡∏µ</label>
        <div className="theme-selector">
          <div 
            className={`theme-option ${settings.theme === 'light' ? 'active' : ''}`}
            onClick={() => updateSetting('theme', 'light')}
          >
            ‚òÄÔ∏è ‡∏™‡∏ß‡πà‡∏≤‡∏á
          </div>
          <div 
            className={`theme-option ${settings.theme === 'dark' ? 'active' : ''}`}
            onClick={() => updateSetting('theme', 'dark')}
          >
            üåô ‡∏°‡∏∑‡∏î
          </div>
          <div 
            className={`theme-option ${settings.theme === 'auto' ? 'active' : ''}`}
            onClick={() => updateSetting('theme', 'auto')}
          >
            üåì ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          </div>
        </div>
      </div>

      <div className="setting-group">
        <label className="setting-label">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</label>
        <div className="font-size-selector">
          {Object.entries({
            small: '‡πÄ‡∏•‡πá‡∏Å',
            medium: '‡∏õ‡∏Å‡∏ï‡∏¥',
            large: '‡πÉ‡∏´‡∏ç‡πà',
            xlarge: '‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å'
          }).map(([key, label]) => (
            <button
              key={key}
              className={`size-option ${settings.fontSize === key ? 'active' : ''}`}
              onClick={() => updateSetting('fontSize', key)}
            >
              {label}
            </button>
          ))}
        </div>
      </div>

      <div className="setting-group">
        <label className="setting-label">‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å</label>
        <div className="color-palette">
          {colorPresets.map(color => (
            <div
              key={color.value}
              className={`color-option ${settings.primaryColor === color.value ? 'active' : ''}`}
              style={{ backgroundColor: color.value }}
              onClick={() => updateSetting('primaryColor', color.value)}
              title={color.name}
            />
          ))}
          <input
            type="color"
            value={settings.primaryColor}
            onChange={(e) => updateSetting('primaryColor', e.target.value)}
            className="color-picker"
          />
        </div>
      </div>

      <div className="setting-group">
        <label className="setting-label">‡∏™‡∏µ‡∏£‡∏≠‡∏á</label>
        <div className="color-palette">
          {colorPresets.map(color => (
            <div
              key={color.value}
              className={`color-option ${settings.accentColor === color.value ? 'active' : ''}`}
              style={{ backgroundColor: color.value }}
              onClick={() => updateSetting('accentColor', color.value)}
              title={color.name}
            />
          ))}
          <input
            type="color"
            value={settings.accentColor}
            onChange={(e) => updateSetting('accentColor', e.target.value)}
            className="color-picker"
          />
        </div>
      </div>
    </div>
  );
};

// Display Settings Component
const DisplaySettings = ({ settings, updateSetting }) => {
  return (
    <div className="settings-section">
    
      <h2 className="section-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•</h2>
      
      <div className="setting-group">
        <label className="setting-label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Sidebar</label>
        <div className="radio-group">
          <label className="radio-option">
            <input
              type="radio"
              value="left"
              checked={settings.sidebarPosition === 'left'}
              onChange={(e) => updateSetting('sidebarPosition', e.target.value)}
            />
            ‡∏ã‡πâ‡∏≤‡∏¢
          </label>
          <label className="radio-option">
            <input
              type="radio"
              value="right"
              checked={settings.sidebarPosition === 'right'}
              onChange={(e) => updateSetting('sidebarPosition', e.target.value)}
            />
            ‡∏Ç‡∏ß‡∏≤
          </label>
        </div>
      </div>

      <div className="setting-group">
        <label className="setting-label">‡∏Ç‡∏ô‡∏≤‡∏î Sidebar</label>
        <select 
          value={settings.sidebarWidth}
          onChange={(e) => updateSetting('sidebarWidth', e.target.value)}
          className="setting-select"
        >
          <option value="narrow">‡πÅ‡∏Ñ‡∏ö (200px)</option>
          <option value="normal">‡∏õ‡∏Å‡∏ï‡∏¥ (250px)</option>
          <option value="wide">‡∏Å‡∏ß‡πâ‡∏≤‡∏á (300px)</option>
        </select>
      </div>

      <div className="setting-group">
        <label className="setting-label">
          <input
            type="checkbox"
            checked={settings.compactMode}
            onChange={(e) => updateSetting('compactMode', e.target.checked)}
          />
          ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏∞‡∏ó‡∏±‡∏î‡∏£‡∏±‡∏î
        </label>
      </div>

      <div className="setting-group">
        <label className="setting-label">
          <input
            type="checkbox"
            checked={settings.showTimestamps}
            onChange={(e) => updateSetting('showTimestamps', e.target.checked)}
          />
          ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        </label>
      </div>

      <div className="setting-group">
        <label className="setting-label">
          <input
            type="checkbox"
            checked={settings.showAvatars}
            onChange={(e) => updateSetting('showAvatars', e.target.checked)}
          />
          ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
        </label>
      </div>

      <div className="setting-group">
        <label className="setting-label">
          <input
            type="checkbox"
            checked={settings.animationsEnabled}
            onChange={(e) => updateSetting('animationsEnabled', e.target.checked)}
          />
          ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô
        </label>
      </div>

      <div className="setting-group">
        <label className="setting-label">
          <input
            type="checkbox"
            checked={settings.highContrast}
            onChange={(e) => updateSetting('highContrast', e.target.checked)}
          />
          ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏™‡∏π‡∏á
        </label>
      </div>
    </div>
  );
};

// Other Settings Components (Simplified for brevity)
const NotificationSettings = ({ settings, updateSetting }) => (
  <div className="settings-section">

    <h2 className="section-title">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
    {/* Add notification settings here */}
  </div>
);

const MessageSettings = ({ settings, updateSetting }) => (
  <div className="settings-section">
  
    <h2 className="section-title">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h2>
    {/* Add message settings here */}
  </div>
);

const PerformanceSettings = ({ settings, updateSetting }) => (
  <div className="settings-section">
   
    <h2 className="section-title">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</h2>
    {/* Add performance settings here */}
  </div>
);

const PrivacySettings = ({ settings, updateSetting }) => (
  <div className="settings-section">
  
    <h2 className="section-title">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
    {/* Add privacy settings here */}
  </div>
);

const AccessibilitySettings = ({ settings, updateSetting }) => (
  <div className="settings-section">
 
    <h2 className="section-title">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á</h2>
    {/* Add accessibility settings here */}
  </div>
);

const AdvancedSettings = ({ settings, updateSetting }) => (
  <div className="settings-section">
  
    <h2 className="section-title">‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á</h2>
    {/* Add advanced settings here */}
  </div>
);

export default Settings;