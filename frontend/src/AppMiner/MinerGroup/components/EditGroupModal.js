// MinerGroup/components/EditGroupModal.js
import React, { useState, useEffect } from 'react';

/**
 * EditGroupModal Component
 * Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á knowledge group, default group ‡πÅ‡∏•‡∏∞ user group
 * - ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö popup modal ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
 */
const EditGroupModal = ({ show, group, onSave, onClose }) => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [editData, setEditData] = useState({
    type_name: '',
    rule_description: '',
    keywords: '',
    examples: ''
  });

  // Reset form ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
  useEffect(() => {
    if (group) {
      setEditData({
        type_name: group.type_name || group.name || '',
        rule_description: group.rule_description || '',
        keywords: Array.isArray(group.keywords) ? group.keywords.join(', ') : group.keywords || '',
        examples: Array.isArray(group.examples) ? group.examples.join('\n') : group.examples || ''
      });
    }
  }, [group]);

  // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á modal ‡∏ñ‡πâ‡∏≤ show = false ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• group
  if (!show || !group) return null;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
  const isKnowledgeGroup = group.isKnowledge;
  const isDefaultGroup = group.isDefault;
  const isDisabled = isKnowledgeGroup && group.is_enabled === false;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  const handleSave = () => {
    if (!editData.type_name.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°");
      return;
    }
    onSave(editData);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  const handleCancel = () => {
    // Reset form
    setEditData({
      type_name: group.type_name || group.name || '',
      rule_description: group.rule_description || '',
      keywords: Array.isArray(group.keywords) ? group.keywords.join(', ') : group.keywords || '',
      examples: Array.isArray(group.examples) ? group.examples.join('\n') : group.examples || ''
    });
    onClose();
  };

  return (
    <div className="edit-modal-overlay" onClick={handleCancel}>
      <div className="edit-modal-content" onClick={(e) => e.stopPropagation()}>
        {/* Header */}
        <div className="edit-modal-header">
          <h2 className="edit-modal-title">
            <span className="edit-icon">‚úèÔ∏è</span>
            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
            {isKnowledgeGroup && <span className="badge-knowledge">‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>}
            {isDefaultGroup && <span className="badge-default">‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>}
          </h2>
          <button className="modal-close-btn" onClick={handleCancel}>‚úñ</button>
        </div>

        {/* Body */}
        <div className="edit-modal-body">
          {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠ */}
          <div className="form-group">
            <label className="form-label">
              ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° <span className="required">*</span>
            </label>
            <input
              type="text"
              className="form-input"
              value={editData.type_name}
              onChange={(e) => setEditData({ ...editData, type_name: e.target.value })}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°"
              disabled={isDisabled}
            />
          </div>

          {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô default */}
          {!isDefaultGroup && (
            <div className="form-group">
              <label className="form-label">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°</label>
              <textarea
                className="form-textarea"
                value={editData.rule_description}
                onChange={(e) => setEditData({ ...editData, rule_description: e.target.value })}
                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏é‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ..."
                rows="3"
                disabled={isDisabled}
              />
            </div>
          )}

          {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå Keywords - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö knowledge ‡πÅ‡∏•‡∏∞ user groups */}
          {!isDefaultGroup && (
            <div className="form-group">
              <label className="form-label">
                Keywords (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤)
                <span className="form-hint">‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</span>
              </label>
              <input
                type="text"
                className="form-input"
                value={editData.keywords}
                onChange={(e) => setEditData({ ...editData, keywords: e.target.value })}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ô‡πÉ‡∏à, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"
                disabled={isDisabled}
              />
            </div>
          )}

          {/* ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö knowledge ‡πÅ‡∏•‡∏∞ user groups */}
          {!isDefaultGroup && (
            <div className="form-group">
              <label className="form-label">
                ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                <span className="form-hint">‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ñ‡∏∑‡∏≠ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</span>
              </label>
              <textarea
                className="form-textarea"
                value={editData.examples}
                onChange={(e) => setEditData({ ...editData, examples: e.target.value })}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô&#10;- ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'&#10;- ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà'"
                rows="4"
                disabled={isDisabled}
              />
            </div>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
          {isDisabled && (
            <div className="disabled-notice">
              ‚ö†Ô∏è ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="edit-modal-footer">
          <button 
            className="btn-save" 
            onClick={handleSave}
            disabled={isDisabled || !editData.type_name.trim()}
          >
            <span className="btn-icon">üíæ</span>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
          <button className="btn-cancel" onClick={handleCancel}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </div>
    </div>
  );
};

export default EditGroupModal;