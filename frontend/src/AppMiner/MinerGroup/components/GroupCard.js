// MinerGroup/components/GroupCard.js
import React from 'react';
import EditGroupForm from './EditGroupForm';

/**
 * GroupCard Component
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á default group ‡πÅ‡∏•‡∏∞ user group
 * - ‡∏°‡∏µ checkbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * - ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô schedule
 * - ‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏ö
 */
const GroupCard = ({ 
  group, 
  isSelected, 
  isEditing, 
  scheduleCount,
  onToggleSelect, 
  onStartEdit, 
  onDelete, 
  onEditMessages, 
  onViewSchedules,
  onSaveEdit,
  onCancelEdit
}) => {
  const isDefault = group.isDefault;
  
  return (
    <div className={`group-card ${isDefault ? 'default-group' : ''} ${isSelected ? 'selected' : ''}`}>
      {isDefault && <div className="default-badge">‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</div>}
      
      <div className="group-checkbox">
        <input
          type="checkbox"
          id={`group-${group.id}`}
          checked={isSelected}
          onChange={() => onToggleSelect(group.id)}
        />
        <label htmlFor={`group-${group.id}`}></label>
      </div>
      
      <div className="group-content">
        <div className="group-icon">{group.icon || 'üë•'}</div>
        
        {isEditing ? (
          <EditGroupForm 
            group={group}
            onSave={onSaveEdit}
            onCancel={onCancelEdit}
          />
        ) : (
          <>
            <h3 className="group-name">{group.type_name || group.name}</h3>
            
            {group.rule_description && (
              <p className="group-description">{group.rule_description}</p>
            )}
            
            {group.keywords && !isDefault && (
              <div className="group-keywords">
                {(() => {
                  const keywordsList = typeof group.keywords === 'string' 
                    ? group.keywords.split(',').map(k => k.trim()).filter(k => k)
                    : Array.isArray(group.keywords) 
                    ? group.keywords 
                    : [];
                  
                  return keywordsList.slice(0, 3).map((keyword, idx) => (
                    <span key={idx} className="keyword-tag">{keyword}</span>
                  )).concat(
                    keywordsList.length > 3 
                      ? [<span key="more" className="more-keywords">+{keywordsList.length - 3}</span>]
                      : []
                  );
                })()}
              </div>
            )}
          </>
        )}
        
        {scheduleCount > 0 && (
          <div className="schedule-info" onClick={(e) => {
            e.stopPropagation();
            onViewSchedules(group);
          }}>
            <span>‚è∞ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {scheduleCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
          </div>
        )}
        
        <div className="group-meta">
          <div className="group-date">
            {isDefault ? '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö' : 
             `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${group.created_at ? new Date(group.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`}
          </div>
        </div>
        
        <div className="group-actions">
          <button onClick={(e) => {
            e.stopPropagation();
            onStartEdit(group);
          }} className="action-btn edit-name-btn">
            ‚úèÔ∏è {isDefault ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}
          </button>
          <button onClick={(e) => {
            e.stopPropagation();
            onEditMessages(group.id);
          }} className="action-btn edit-message-btn">
            üí¨ {isDefault ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°' : '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'}
          </button>
          <button onClick={(e) => {
            e.stopPropagation();
            onEditMessages(group.id);
          }} className="action-btn edit-message-btn">
            {isDefault ? '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
          </button>
        </div>
      </div>
      
      {!isDefault && (
        <button
          onClick={(e) => {
            e.stopPropagation();
            onDelete(group.id);
          }}
          className="delete-btn"
          title="‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"
        >
          üóëÔ∏è
        </button>
      )}
    </div>
  );
};

export default GroupCard;