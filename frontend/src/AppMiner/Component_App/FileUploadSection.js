// components/FileUploadSection.js
// =====================================================
// COMPONENT: FileUploadSection
// PURPOSE: ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
// FEATURES:
// - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel, Word, CSV
// - ‡πÅ‡∏™‡∏î‡∏á preview ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
// - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
// =====================================================

import React, { useState, useRef } from 'react';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import * as mammoth from 'mammoth';

const FileUploadSection = ({ 
  displayData, 
  onSelectUsers, 
  onClearSelection,
  selectedPage,
  onAddUsersFromFile // üÜï Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° users ‡∏à‡∏≤‡∏Å database
}) => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadedFileName, setUploadedFileName] = useState('');
  const [usersFromFile, setUsersFromFile] = useState([]);
  const [searchStats, setSearchStats] = useState(null);
  const [isSearching, setIsSearching] = useState(false);
  const fileInputRef = useRef(null);

  // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
  const readExcelFile = async (file) => {
    try {
      const data = await file.arrayBuffer();
      const workbook = XLSX.read(data);
      const firstSheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[firstSheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet);
      
      const userNames = [];
      jsonData.forEach(row => {
        const name = row['‡∏ä‡∏∑‡πà‡∏≠'] || row['Name'] || row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'] || 
                    row['Username'] || row['‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'] || 
                    row['Full Name'] || row['‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'] || row['User'];
        if (name) {
          userNames.push(name.toString().trim());
        }
      });
      
      return [...new Set(userNames)];
    } catch (error) {
      console.error('Error reading Excel file:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word
  const readWordFile = async (file) => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const result = await mammoth.extractRawText({ arrayBuffer });
      const text = result.value;
      
      const lines = text.split('\n').filter(line => line.trim());
      const userNames = lines.map(line => line.trim());
      
      return [...new Set(userNames)];
    } catch (error) {
      console.error('Error reading Word file:', error);
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Word ‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
  const readCSVFile = async (file) => {
    return new Promise((resolve, reject) => {
      Papa.parse(file, {
        complete: (results) => {
          const userNames = [];
          results.data.forEach(row => {
            const name = row[0] || row['‡∏ä‡∏∑‡πà‡∏≠'] || row['Name'] || row['‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'];
            if (name && name.trim()) {
              userNames.push(name.trim());
            }
          });
          resolve([...new Set(userNames)]);
        },
        error: (error) => {
          reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ'));
        },
        header: true
      });
    });
  };

  // üÜï ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô database
  const searchInDatabase = async (userNames) => {
    if (!selectedPage || userNames.length === 0) return;
    
    setIsSearching(true);
    try {
      const response = await fetch('http://localhost:8000/search-customers-by-file', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          page_id: selectedPage,
          user_names: userNames
        })
      });

      if (!response.ok) {
        throw new Error('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      const data = await response.json();
      
      setSearchStats({
        found: data.found_count,
        notFound: data.not_found_count,
        notFoundNames: data.not_found_names || []
      });

      if (data.found_count > 0) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° users ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        if (onAddUsersFromFile) {
          onAddUsersFromFile(data.customers);
        }
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å users ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        const conversationIds = data.customers.map(c => c.conversation_id);
        onSelectUsers(conversationIds);
        
        showSuccessNotification(
          `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ${data.found_count} ‡∏Ñ‡∏ô ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${userNames.length} ‡∏Ñ‡∏ô`
        );
      } else {
        showWarningNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      }
      
    } catch (error) {
      console.error('Error searching in database:', error);
      showErrorNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsSearching(false);
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsUploading(true);
    setUploadedFileName(file.name);
    setSearchStats(null);

    try {
      let userNames = [];
      const fileType = file.name.split('.').pop().toLowerCase();

      switch (fileType) {
        case 'xlsx':
        case 'xls':
          userNames = await readExcelFile(file);
          break;
        case 'docx':
        case 'doc':
          userNames = await readWordFile(file);
          break;
        case 'csv':
          userNames = await readCSVFile(file);
          break;
        default:
          throw new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå Excel, Word ‡πÅ‡∏•‡∏∞ CSV');
      }

      if (userNames.length === 0) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå');
      }

      setUsersFromFile(userNames);
      showSuccessNotification(`‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ${userNames.length} ‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå`);
      
      // üÜï ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô database ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      await searchInDatabase(userNames);
      
    } catch (error) {
      showErrorNotification(error.message);
      setUploadedFileName('');
      setUsersFromFile([]);
    } finally {
      setIsUploading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Notification
  const showSuccessNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚úÖ</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const showErrorNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚ùå</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const showWarningNotification = (message) => {
    const notification = document.createElement('div');
    notification.className = 'warning-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚ö†Ô∏è</span>
        <span>${message}</span>
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  };

  const clearFile = () => {
    setUploadedFileName('');
    setUsersFromFile([]);
    setSearchStats(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    if (onClearSelection) {
      onClearSelection();
    }
  };

  return (
    <div className="file-upload-section">
      <div className="file-upload-container">
        <input
          ref={fileInputRef}
          type="file"
          accept=".xlsx,.xls,.doc,.docx,.csv"
          onChange={handleFileUpload}
          className="file-input"
          id="file-upload"
          disabled={!selectedPage}
        />
        <label 
          htmlFor="file-upload" 
          className={`file-upload-label ${!selectedPage ? 'disabled' : ''}`}
        >
          <span className="upload-icon">üìÅ</span>
          <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠</span>
        </label>
        
        {uploadedFileName && (
          <div className="uploaded-file-info">
            <span className="file-name">{uploadedFileName}</span>
            <span className="user-count">({usersFromFile.length} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠)</span>
            <button onClick={clearFile} className="clear-file-btn">‚úñ</button>
          </div>
        )}
        
        {isSearching && (
          <div className="search-loading">
            <span className="loading-spinner"></span>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...</span>
          </div>
        )}
        
        {isUploading && (
          <div className="upload-loading">
            <span className="loading-spinner"></span>
            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå...</span>
          </div>
        )}
      </div>
      
    </div>
  );
};

export default FileUploadSection;