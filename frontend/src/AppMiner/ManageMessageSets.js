import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { fetchPages, getMessageSetsByPage, connectFacebook, updateMessageSet, deleteMessageSet } from '../Features/Tool';
import '../CSS/ManageMessageSets.css';
import Sidebar from "./Sidebar"; 

function ManageMessageSets() {
    const [pages, setPages] = useState([]);
    const [selectedPage, setSelectedPage] = useState('');
    const [messageSets, setMessageSets] = useState([]);
    const [loading, setLoading] = useState(false);
    const [editingId, setEditingId] = useState(null);
    const [editingName, setEditingName] = useState('');
    const [searchTerm, setSearchTerm] = useState('');
    const [sortOrder, setSortOrder] = useState('newest');
    // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° dropdown (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á component)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle
    const toggleDropdown = () => {
        setIsDropdownOpen(!isDropdownOpen);
    };

    const navigate = useNavigate();

    useEffect(() => {
        const loadPages = async () => {
            try {
                const pagesData = await fetchPages();
                setPages(pagesData);

                const savedPage = localStorage.getItem('selectedPage');
                if (savedPage && pagesData.some(page => page.id === savedPage)) {
                    setSelectedPage(savedPage);
                }
            } catch (err) {
                console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏à‡πÑ‡∏î‡πâ:', err);
            }
        };

        loadPages();
    }, []);

    useEffect(() => {
        const loadMessageSets = async () => {
            if (!selectedPage) return;
            setLoading(true);
            try {
                const sets = await getMessageSetsByPage(selectedPage);
                setMessageSets(sets);
            } catch (err) {
                console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', err);
            } finally {
                setLoading(false);
            }
        };

        loadMessageSets();
    }, [selectedPage]);

    // Listen for page changes from Sidebar
    useEffect(() => {
    const handlePageChange = (event) => {
        const pageId = event.detail.pageId;
        setSelectedPage(pageId);
    };

    window.addEventListener('pageChanged', handlePageChange);
    
    const savedPage = localStorage.getItem("selectedPage");
    if (savedPage) {
        setSelectedPage(savedPage);
    }

    return () => {
        window.removeEventListener('pageChanged', handlePageChange);
    };
    }, []);

    const handlePageChange = (e) => {
        const pageId = e.target.value;
        setSelectedPage(pageId);
        localStorage.setItem('selectedPage', pageId);
    };

    const handleStartEdit = (set) => {
        setEditingId(set.id);
        setEditingName(set.set_name);
    };

    const handleCancelEdit = () => {
        setEditingId(null);
        setEditingName('');
    };

    const handleSaveEdit = async (setId) => {
        if (!editingName.trim()) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
            return;
        }

        try {
            await updateMessageSet(setId, editingName);
            
            setMessageSets(prevSets => 
                prevSets.map(set => 
                    set.id === setId ? { ...set, set_name: editingName } : set
                )
            );
            
            setEditingId(null);
            setEditingName('');
            alert('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (err) {
            console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ:', err);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        }
    };

    const handleDelete = async (setId, setName) => {
        if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${setName}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`)) {
            return;
        }

        try {
            await deleteMessageSet(setId);
            
            setMessageSets(prevSets => prevSets.filter(set => set.id !== setId));
            
            
            console.log(`‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ${setName} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        } catch (err) {
            console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ:', err);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
        }
    };

    // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const filteredAndSortedSets = messageSets
        .filter(set => set.set_name.toLowerCase().includes(searchTerm.toLowerCase()))
        .sort((a, b) => {
            if (sortOrder === 'newest') {
                return b.id - a.id;
            } else if (sortOrder === 'oldest') {
                return a.id - b.id;
            } else if (sortOrder === 'name') {
                return a.set_name.localeCompare(b.set_name);
            }
            return 0;
        });

    return (
        <div className="app-container">
             <Sidebar />

            <main className="main-content">
                <div className="content-header">
                    <h1 className="page-title">
                        <span className="title-icon">üìÇ</span>
                        ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
                    </h1>
                    {selectedPage && (
                        <div className="selected-page-info">
                            <span className="info-label">‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</span>
                            <span className="info-value">
                                {pages.find(p => p.id === selectedPage)?.name || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à'}
                            </span>
                        </div>
                    )}
                </div>

                <div className="content-controls">
                    <div className="search-section">
                        <div className="search-box">
                            <span className="search-icon">üîç</span>
                            <input
                                type="text"
                                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="search-input"
                            />
                        </div>
                        <select 
                            value={sortOrder} 
                            onChange={(e) => setSortOrder(e.target.value)}
                            className="sort-select"
                        >
                            <option value="newest">‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                            <option value="oldest">‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</option>
                            
                        </select>
                    </div>
                    <button onClick={() => navigate('/default')} className="add-btn">
                        <span className="btn-icon">‚ûï</span>
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    </button>
                </div>

                <div className="content-body">
                    {!selectedPage ? (
                        <div className="empty-state">
                            <div className="empty-icon">üìã</div>
                            <h3>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏à</h3>
                          
                        </div>
                            
                    ) : loading ? (
                        <div className="loading-state">
                            <div className="loading-spinner"></div>
                         
                        </div>
                    ) : filteredAndSortedSets.length === 0 ? (
                        <div className="empty-state">
                            <div className="empty-icon">üì≠</div>
                            <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h3>
                          
                           
                        </div>
                    ) : (
                        <div className="message-sets-grid">
                            {filteredAndSortedSets.map((set, index) => (
                                <div key={set.id} className="message-set-card">
                                    <div className="card-header">
                                        <span className="card-number">{index + 1}</span>
                                        <div className="card-actions">
                                            <button
                                                onClick={() => navigate(`/default?setId=${set.id}`)}
                                                className="action-btn edit-btn"
                                                title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                                            >
                                                ‚úèÔ∏è
                                            </button>
                                            <button style={{backgroundColor:"red"}}
                                                onClick={() => handleDelete(set.id, set.set_name)}
                                                className="action-btn edit-btn"
                                                title="‡∏•‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    </div>
                                    <div className="card-body">
                                        <div className="card-icon">üìå</div>
                                        <h3 className="card-title">{set.set_name}</h3>
                                        <div className="card-meta">
                                            <span className="meta-item">
                                               {/* <span className="meta-icon">üìù</span>
                                                {set.message_count || 0} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */}
                                            </span>
                                            <span className="meta-item">
                                               {/* <span className="meta-icon">üìÖ</span>
                                                {new Date(set.created_at || Date.now()).toLocaleDateString('th-TH')}*/}
                                               
                                            </span>
                                        </div>
                                    </div>
                                    <div className="card-footer">
                                        <button
                                            onClick={() => navigate(`/default?setId=${set.id}`)}
                                            className="view-btn"
                                        >
                                            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                        </button>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                <div className="content-footer">
                    <Link to="/App" className="back-button">
                        <span className="back-icon">‚Üê</span>
                        ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                    </Link>
                </div>
            </main>
        </div>
    );
}

export default ManageMessageSets;