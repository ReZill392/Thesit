# backend/app/routes/facebook/schedules.py
"""
Facebook Schedules Component
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î schedules
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö user inactivity
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ schedule tracking
- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user inactivity
"""

from fastapi import APIRouter, Request
from typing import Dict, List, Any
import logging

from app.service.message_scheduler import message_scheduler
from .auth import get_page_tokens

router = APIRouter()
logger = logging.getLogger(__name__)


@router.post("/schedule/activate")
async def activate_schedule(request: Request):
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô schedule"""
    data = await request.json()
    page_id = data.get('page_id')
    schedule = data.get('schedule')
    
    if not page_id or not schedule:
        return {"status": "error", "message": "Missing required data"}
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens ‡πÉ‡∏´‡πâ scheduler ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° schedule
    page_tokens = get_page_tokens()
    message_scheduler.set_page_tokens(page_tokens)
    
    # Reset sent tracking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö schedule ‡∏ô‡∏µ‡πâ
    schedule_id = str(schedule['id'])
    message_scheduler.sent_tracking[schedule_id] = set()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• schedule
    if 'pageId' not in schedule and page_id:
        schedule['pageId'] = page_id
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° schedule ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
    message_scheduler.add_schedule(page_id, schedule)
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÉ‡∏´‡πâ process ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if schedule.get('type') == 'immediate':
        await message_scheduler.process_schedule(page_id, schedule)
        return {"status": "success", "message": "Immediate schedule processed"}
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scheduled ‡πÅ‡∏•‡∏∞ user-inactive ‡∏à‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ scheduler ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    return {"status": "success", "message": "Schedule activated"}


@router.get("/active-schedules/{page_id}")
async def get_active_schedules(page_id: str):
    """‡∏î‡∏π schedules ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    schedules = message_scheduler.get_active_schedules_for_page(page_id)
    return {
        "page_id": page_id,
        "active_schedules": schedules,
        "count": len(schedules)
    }


@router.post("/schedule/deactivate")
async def deactivate_schedule(request: Request):
    """‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô schedule"""
    data = await request.json()
    page_id = data.get('page_id')
    schedule_id = data.get('schedule_id')
    
    if not page_id or schedule_id is None:
        return {"status": "error", "message": "Missing required data"}
    
    message_scheduler.remove_schedule(page_id, schedule_id)
    
    return {"status": "success", "message": "Schedule deactivated"}


@router.get("/schedule/test-inactivity/{page_id}")
async def test_user_inactivity(page_id: str, minutes: int = 1):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    
    Parameters:
    - page_id: ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à
    - minutes: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (default = 1)
    """
    # Mock schedule for testing
    test_schedule = {
        "id": 999,
        "type": "user-inactive",
        "inactivityPeriod": str(minutes),
        "inactivityUnit": "minutes",
        "groups": [1],
        "messages": [
            {
                "type": "text",
                "content": f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏°‡∏≤ {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
                "order": 0
            },
            {
                "type": "text", 
                "content": "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì! ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏™‡∏¥‡∏Ñ‡∏∞ üíù",
                "order": 1
            }
        ]
    }
    
    # Reset tracking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    message_scheduler.sent_tracking["999"] = set()
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    page_tokens = get_page_tokens()
    message_scheduler.set_page_tokens(page_tokens)
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    await message_scheduler.check_user_inactivity(page_id, test_schedule)
    
    # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    sent_users = list(message_scheduler.sent_tracking.get("999", set()))
    
    return {
        "status": "success", 
        "message": f"Checked users inactive for {minutes} minutes",
        "sent_to_users": sent_users,
        "count": len(sent_users)
    }


@router.post("/schedule/reset-tracking/{schedule_id}")
async def reset_schedule_tracking(schedule_id: str):
    """Reset tracking data ‡∏Ç‡∏≠‡∏á schedule"""
    message_scheduler.sent_tracking[schedule_id] = set()
    return {"status": "success", "message": f"Reset tracking for schedule {schedule_id}"}


@router.get("/schedule/system-status")
async def get_system_status():
    """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö scheduler"""
    return {
        "is_running": message_scheduler.is_running,
        "active_pages": list(message_scheduler.active_schedules.keys()),
        "total_schedules": sum(len(schedules) for schedules in message_scheduler.active_schedules.values()),
        "schedules_by_page": {
            page_id: len(schedules) 
            for page_id, schedules in message_scheduler.active_schedules.items()
        },
        "tracking_info": {
            schedule_id: len(users) 
            for schedule_id, users in message_scheduler.sent_tracking.items()
        }
    }


@router.post("/update-user-inactivity/{page_id}")
async def update_user_inactivity(page_id: str, request: Request):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á users ‡∏à‡∏≤‡∏Å frontend"""
    try:
        data = await request.json()
        user_data = data.get('users', [])
        
        if not user_data:
            return {"status": "error", "message": "No user data provided"}
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô scheduler
        message_scheduler.update_user_inactivity_data(page_id, user_data)
        
        return {
            "status": "success", 
            "message": f"Updated inactivity data for {len(user_data)} users",
            "updated_count": len(user_data)
        }
        
    except Exception as e:
        logger.error(f"Error updating user inactivity data: {e}")
        return {"status": "error", "message": str(e)}