from fastapi import APIRouter, Request, Depends, BackgroundTasks
from fastapi.responses import PlainTextResponse
from app.database import crud
from app.database.database import get_db
from sqlalchemy.orm import Session
from datetime import datetime
import os
from app.service.facebook_api import fb_get
import logging
import asyncio

router = APIRouter()
logger = logging.getLogger(__name__)

# Dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô user ‡πÉ‡∏´‡∏°‡πà
new_user_notifications = {}

# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô webhook
@router.get("/webhook")
async def verify_webhook(request: Request):
    params = request.query_params
    if params.get("hub.mode") == "subscribe" and params.get("hub.verify_token") == os.getenv("VERIFY_TOKEN"):
        return PlainTextResponse(content=params.get("hub.challenge"), status_code=200)
    return PlainTextResponse(content="Verification failed", status_code=403)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
async def sync_new_user_data(page_id: str, sender_id: str, page_db_id: int, db: Session):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    try:
        from backend.app.routes.facebook.conversations import page_tokens
        access_token = page_tokens.get(page_id)
        
        if not access_token:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page {page_id}")
            return None
            
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user profile ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        user_fields = "id,name,first_name,last_name,profile_pic,gender,locale,timezone"
        user_info = fb_get(sender_id, {"fields": user_fields}, access_token)
        
        # 2. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
        user_name = user_info.get("name", "")
        if not user_name:
            user_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            
        # 3. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversation ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
        endpoint = f"{page_id}/conversations"
        params = {
            "fields": "participants,updated_time,id,messages.limit(1){created_time}",
            "user_id": sender_id,
            "limit": 1
        }
        
        conversations = fb_get(endpoint, params, access_token)
        
        # 4. ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        first_interaction = datetime.now()
        last_interaction = datetime.now()
        
        if conversations and "data" in conversations and conversations["data"]:
            conv = conversations["data"][0]
            
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å
            if "messages" in conv and "data" in conv["messages"] and conv["messages"]["data"]:
                first_msg_time = conv["messages"]["data"][0].get("created_time")
                if first_msg_time:
                    try:
                        first_interaction = datetime.fromisoformat(first_msg_time.replace('Z', '+00:00'))
                    except:
                        pass
                        
            # ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if conv.get("updated_time"):
                try:
                    last_interaction = datetime.fromisoformat(conv["updated_time"].replace('Z', '+00:00'))
                except:
                    pass
        
        # 5. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        customer_data = {
            'name': user_name or f"User...{sender_id[-8:]}",
            'first_interaction_at': first_interaction,
            'last_interaction_at': last_interaction,
            'profile_pic': user_info.get('profile_pic', ''),
            'metadata': {
                'gender': user_info.get('gender'),
                'locale': user_info.get('locale'),
                'timezone': user_info.get('timezone')
            }
        }
        
        # 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á database
        customer = crud.create_or_update_customer(db, page_db_id, sender_id, customer_data)
        
        logger.info(f"‚úÖ Auto sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡πÉ‡∏´‡∏°‡πà: {user_name} ({sender_id})")
        
        # 7. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if page_id not in new_user_notifications:
            new_user_notifications[page_id] = []
            
        new_user_notifications[page_id].append({
            'user_name': user_name,
            'psid': sender_id,
            'timestamp': datetime.now().isoformat(),
            'profile_pic': user_info.get('profile_pic', '')
        })
        
        # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        cutoff_time = datetime.now().timestamp() - (24 * 60 * 60)
        new_user_notifications[page_id] = [
            notif for notif in new_user_notifications[page_id]
            if datetime.fromisoformat(notif['timestamp']).timestamp() > cutoff_time
        ]
        
        return customer
        
    except Exception as e:
        logger.error(f"‚ùå Error syncing new user data: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SSE
@router.post("/webhook")
async def webhook_post(
    request: Request, 
    db: Session = Depends(get_db),
    background_tasks: BackgroundTasks = BackgroundTasks()
):
    body = await request.json()
    
    for entry in body.get("entry", []):
        page_id = entry.get("id")  # Page ID
        
        # ‡∏î‡∏∂‡∏á page ‡∏à‡∏≤‡∏Å database
        page = crud.get_page_by_page_id(db, page_id) if page_id else None
        
        for msg_event in entry.get("messaging", []):
            sender_id = msg_event["sender"]["id"]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å page ‡πÄ‡∏≠‡∏á
            if page and sender_id != page_id:
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    existing_customer = crud.get_customer_by_psid(db, page.ID, sender_id)
                    
                    if not existing_customer:
                        # ‡πÄ‡∏õ‡πá‡∏ô user ‡πÉ‡∏´‡∏°‡πà! ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ sync ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        logger.info(f"üÜï ‡∏û‡∏ö User ‡πÉ‡∏´‡∏°‡πà: {sender_id} ‡πÉ‡∏ô‡πÄ‡∏û‡∏à {page.page_name}")
                        
                        # Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                        background_tasks.add_task(
                            sync_new_user_data_enhanced,
                            page_id,
                            sender_id,
                            page.ID,
                            db
                        )
                        
                    else:
                        # User ‡πÄ‡∏Å‡πà‡∏≤ - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
                        crud.update_customer_interaction(db, page.ID, sender_id)
                        logger.info(f"üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last_interaction_at ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {existing_customer.name}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error processing webhook: {e}")
    
    return PlainTextResponse("EVENT_RECEIVED", status_code=200)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô user ‡πÉ‡∏´‡∏°‡πà
@router.get("/new-user-notifications/{page_id}")
async def get_new_user_notifications(page_id: str):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ user ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤"""
    notifications = new_user_notifications.get(page_id, [])
    
    return {
        "page_id": page_id,
        "new_users": notifications,
        "count": len(notifications)
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
async def sync_new_user_data_enhanced(page_id: str, sender_id: str, page_db_id: int, db: Session):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    try:
        from app.routes.facebook.auth import get_page_tokens
        from app.service.facebook_api import fb_get
        
        page_tokens = get_page_tokens()
        access_token = page_tokens.get(page_id)
        
        if not access_token:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page {page_id}")
            return None
            
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user profile
        user_fields = "id,name,first_name,last_name,profile_pic,gender,locale,timezone"
        user_info = fb_get(sender_id, {"fields": user_fields}, access_token)
        
        # 2. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user_name = user_info.get("name", "")
        if not user_name:
            user_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            
        # 3. ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversation ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å
        endpoint = f"{page_id}/conversations"
        params = {
            "fields": "participants,updated_time,id,messages.limit(100){created_time,from}",
            "user_id": sender_id,
            "limit": 1
        }
        
        conversations = fb_get(endpoint, params, access_token)
        
        # 4. ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        first_interaction = None
        last_interaction = datetime.now()
        
        if conversations and "data" in conversations and conversations["data"]:
            conv = conversations["data"][0]
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà user ‡∏™‡πà‡∏á‡∏°‡∏≤
            if "messages" in conv and "data" in conv["messages"]:
                user_messages = [
                    msg for msg in conv["messages"]["data"] 
                    if msg.get("from", {}).get("id") == sender_id
                ]
                
                if user_messages:
                    user_messages.sort(key=lambda x: x.get("created_time", ""))
                    
                    first_msg_time = user_messages[0].get("created_time")
                    if first_msg_time:
                        try:
                            first_interaction = datetime.fromisoformat(first_msg_time.replace('Z', '+00:00'))
                        except:
                            first_interaction = datetime.now()
                    
                    last_msg_time = user_messages[-1].get("created_time")
                    if last_msg_time:
                        try:
                            last_interaction = datetime.fromisoformat(last_msg_time.replace('Z', '+00:00'))
                        except:
                            last_interaction = datetime.now()
            
            if not first_interaction and conv.get("updated_time"):
                try:
                    first_interaction = datetime.fromisoformat(conv["updated_time"].replace('Z', '+00:00'))
                except:
                    first_interaction = datetime.now()
        
        if not first_interaction:
            first_interaction = datetime.now()
        
        # 5. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        customer_data = {
            'name': user_name or f"User...{sender_id[-8:]}",
            'first_interaction_at': first_interaction,
            'last_interaction_at': last_interaction,
            'source_type': 'new',
            'metadata': {
                'profile_pic': user_info.get('profile_pic', ''),
                'gender': user_info.get('gender'),
                'locale': user_info.get('locale'),
                'timezone': user_info.get('timezone')
            }
        }
        
        # 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á database
        customer = crud.create_or_update_customer(db, page_db_id, sender_id, customer_data)
        
        logger.info(f"‚úÖ Auto sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user: {user_name} ({sender_id})")
        
        # üî• ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏™‡πà‡∏á SSE Update ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Frontend
        from app.routes.facebook.sse import customer_type_update_queue
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á update data
            update_data = {
                'page_id': page_id,
                'psid': sender_id,
                'name': user_name or f"User...{sender_id[-8:]}",
                'first_interaction': first_interaction.isoformat() if first_interaction else None,
                'last_interaction': last_interaction.isoformat() if last_interaction else None,
                'source_type': 'new',
                'action': 'new',  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô user ‡πÉ‡∏´‡∏°‡πà
                'timestamp': datetime.now().isoformat()
            }
            
            # ‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤ queue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á SSE
            await customer_type_update_queue.put(update_data)
            logger.info(f"üì° Sent SSE update for new user: {user_name}")
            
        except Exception as e:
            logger.error(f"‚ùå Error sending SSE update: {e}")
        
        # 7. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏î‡∏¥‡∏°)
        if page_id not in new_user_notifications:
            new_user_notifications[page_id] = []
            
        new_user_notifications[page_id].append({
            'user_name': user_name,
            'psid': sender_id,
            'timestamp': datetime.now().isoformat(),
            'profile_pic': user_info.get('profile_pic', ''),
            'first_interaction': first_interaction.isoformat() if first_interaction else None
        })
        
        # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤
        cutoff_time = datetime.now().timestamp() - (24 * 60 * 60)
        new_user_notifications[page_id] = [
            notif for notif in new_user_notifications[page_id]
            if datetime.fromisoformat(notif['timestamp']).timestamp() > cutoff_time
        ]
        
        return customer
        
    except Exception as e:
        logger.error(f"‚ùå Error syncing new user data: {e}")
        return None

# API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
def detect_customer_group(message_text, page_id):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    if not message_text:
        return None
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å localStorage (‡∏ú‡πà‡∏≤‡∏ô API)
    # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô database
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ return None ‡∏Å‡πà‡∏≠‡∏ô
    # ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á keywords
    return None

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô webhook_post function ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user
async def webhook_post(
    request: Request, 
    db: Session = Depends(get_db),
    background_tasks: BackgroundTasks = BackgroundTasks()
):
    body = await request.json()
    
    for entry in body.get("entry", []):
        page_id = entry.get("id")
        page = crud.get_page_by_page_id(db, page_id) if page_id else None
        
        for msg_event in entry.get("messaging", []):
            sender_id = msg_event["sender"]["id"]
            
            if page and sender_id != page_id:
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
                    message = msg_event.get("message", {})
                    message_text = message.get("text", "")
                    
                    existing_customer = crud.get_customer_by_psid(db, page.ID, sender_id)
                    
                    if not existing_customer:
                        # User ‡πÉ‡∏´‡∏°‡πà
                        logger.info(f"üÜï ‡∏û‡∏ö User ‡πÉ‡∏´‡∏°‡πà: {sender_id} ‡πÉ‡∏ô‡πÄ‡∏û‡∏à {page.page_name}")
                        background_tasks.add_task(
                            sync_new_user_data_enhanced,
                            page_id,
                            sender_id,
                            page.ID,
                            db
                        )
                    else:
                        # User ‡πÄ‡∏Å‡πà‡∏≤ - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó interaction ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keywords
                        crud.update_customer_interaction(db, page.ID, sender_id)
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keywords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
                        detected_group = detect_customer_group(message_text, page_id)
                        if detected_group:
                            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                            logger.info(f"üè∑Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ {sender_id} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° {detected_group}")
                            # TODO: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏ô database
                    
                except Exception as e:
                    logger.error(f"‚ùå Error processing webhook: {e}")
    
    return PlainTextResponse("EVENT_RECEIVED", status_code=200)