from app.service.facebook_api import fb_get, send_message, send_image_binary, send_video_binary
from fastapi.responses import JSONResponse, HTMLResponse, RedirectResponse
from datetime import datetime
import requests
from fastapi import APIRouter, Response, Request, Depends
from sqlalchemy.orm import Session
from app.database import crud, schemas, database, models
from app.database.database import get_db
from app import config  # ‚úÖ ‡πÉ‡∏ä‡πâ config ‡πÅ‡∏ó‡∏ô app.app
from pydantic import BaseModel
from app.config import image_dir,vid_dir
from app.service.message_scheduler import message_scheduler
from datetime import datetime, timedelta
from fastapi import Query
from fastapi import APIRouter, Depends, HTTPException
from typing import List, Optional
import pytz

router = APIRouter()

# ================================
# üîß ‡πÄ‡∏û‡∏¥‡πà‡∏° Memory Storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Page Tokens
# ================================
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô facebook.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö paste.txt
page_tokens = {}  # key = page_id, value = PAGE_ACCESS_TOKEN
page_names = {}   # key = page_id, value = page_name

class SendMessageRequest(BaseModel):
    message: str
    type: Optional[str] = "text"  # "text", "image", or "video"

# Models ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
class CustomerGroupCreate(BaseModel):
    page_id: int
    type_name: str
    keywords: List[str] = []
    rule_description: str = ""
    examples: List[str] = []
    
class CustomerGroupUpdate(BaseModel):
    type_name: Optional[str] = None
    keywords: Optional[List[str]] = None
    rule_description: Optional[str] = None
    examples: Optional[List[str]] = None
    is_active: Optional[bool] = None

@router.get("/connect", response_class=HTMLResponse)
async def connect_facebook_page():
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page</title>
        <meta charset="utf-8">
        <style>
            body {{
                font-family: Arial, sans-serif;
                text-align: center;
                margin-top: 100px;
                background-color: #f0f2f5;
            }}
            a.button {{
                background-color: #4267B2;
                color: white;
                padding: 14px 24px;
                text-decoration: none;
                font-size: 18px;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }}
            a.button:hover {{
                background-color: #365899;
            }}
        </style>
    </head>
    <body>
        <h1>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook Page ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>
        <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
        <a href="{config.OAUTH_LINK}" class="button">üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Facebook</a>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@router.get("/facebook/callback")
def facebook_callback(code: str, db: Session = Depends(get_db)):
    print(f"üîó Facebook callback received with code: {code[:20]}...")
    
    # ‡∏î‡∏∂‡∏á access token
    token_url = "https://graph.facebook.com/v14.0/oauth/access_token"
    params = {
        "client_id": config.FB_APP_ID,
        "redirect_uri": config.REDIRECT_URI,
        "client_secret": config.FB_APP_SECRET,
        "code": code
    }

    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠ access token...")
    res = requests.get(token_url, params=params)
    token_data = res.json()

    if "error" in token_data:
        print(f"‚ùå Error getting access token: {token_data['error']}")
        return JSONResponse(status_code=400, content={"error": token_data['error']})

    user_token = token_data.get("access_token")
    print("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö user access token ‡πÅ‡∏•‡πâ‡∏ß")

    # ‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏à
    pages_url = "https://graph.facebook.com/me/accounts"
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏à...")
    pages_res = requests.get(pages_url, params={"access_token": user_token})
    pages = pages_res.json()

    if "error" in pages:
        print(f"‚ùå Error getting pages: {pages['error']}")
        return JSONResponse(status_code=400, content={"error": pages['error']})

    connected_pages = []
    for page in pages.get("data", []):
        page_id = page["id"]
        access_token = page["access_token"]
        page_name = page.get("name", f"‡πÄ‡∏û‡∏à {page_id}")
        message_scheduler.set_page_tokens(page_tokens)  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö page_tokens ‡πÉ‡∏ô message_scheduler
        
        # ‚úÖ ‡∏™‡πà‡∏á tokens ‡πÉ‡∏´‡πâ auto sync service ‡∏î‡πâ‡∏ß‡∏¢
        from app.service.auto_sync_service import auto_sync_service
        auto_sync_service.set_page_tokens(page_tokens)

        # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô local dictionary ‡πÅ‡∏ó‡∏ô config
        page_tokens[page_id] = access_token
        page_names[page_id] = page_name

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢
        existing = crud.get_page_by_page_id(db, page_id)
        if not existing:
            new_page = schemas.FacebookPageCreate(page_id=page_id, page_name=page_name)
            crud.create_page(db, new_page)

        connected_pages.append({"id": page_id, "name": page_name})
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page_name} (ID: {page_id})")

    print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(connected_pages)} ‡πÄ‡∏û‡∏à")

    if connected_pages:
        return RedirectResponse(url=f"http://localhost:3000/?page_id={connected_pages[0]['id']}")
    else:
        return RedirectResponse(url="http://localhost:3000/?error=no_pages")

@router.get("/pages")
async def get_connected_pages():
    # ‚úÖ ‡πÉ‡∏ä‡πâ local dictionary ‡πÅ‡∏ó‡∏ô config
    pages_list = [{"id": k, "name": page_names.get(k, f"‡πÄ‡∏û‡∏à {k}")} for k in page_tokens.keys()]
    print(f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {len(pages_list)} ‡πÄ‡∏û‡∏à")
    return {"pages": pages_list}

@router.get("/psids")
async def get_user_psids(page_id: str):
    """‡∏î‡∏∂‡∏á PSID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á PSID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ local dictionary ‡πÅ‡∏ó‡∏ô config
    access_token = page_tokens.get(page_id)
    if not access_token:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
        print(f"üîç Available page_tokens: {list(page_tokens.keys())}")  # Debug line
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô"}
        )
    
    print(f"‚úÖ ‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    
    conversations = get_conversations_with_participants(page_id, access_token)
    if conversations:
        data = extract_psids_with_conversation_id(conversations, access_token, page_id)
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(data)}")
        return JSONResponse(content={"conversations": data, "total": len(data)})
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡πÑ‡∏î‡πâ")
        return JSONResponse(
            status_code=500, 
            content={"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversation ‡πÑ‡∏î‡πâ"}
        )

def get_conversations_with_participants(page_id, access_token: str = None):
    endpoint = f"{page_id}/conversations"
    params = {
        "fields": "participants,updated_time,id",
        "limit": 100
    }
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    result = fb_get(endpoint, params, access_token)
    if "error" in result:
        print(f"‚ùå Error getting conversations: {result['error']}")
        return None
    print(f"‚úÖ ‡∏û‡∏ö conversations ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(result.get('data', []))}")
    return result

def get_user_info_from_psid(psid, access_token):
    methods = [
        {
            "endpoint": f"{psid}",
            "params": {"fields": "name,first_name,last_name,profile_pic"}
        },
        {
            "endpoint": f"me",
            "params": {
                "fields": f"{psid}.name,{psid}.first_name,{psid}.last_name",
                "ids": psid
            }
        }
    ]

    for method in methods:
        try:
            result = fb_get(method["endpoint"], method["params"], access_token)
            if "error" not in result:
                name = result.get("name") or result.get("first_name", "")
                if name:
                    return {
                        "name": name,
                        "first_name": result.get("first_name", ""),
                        "last_name": result.get("last_name", ""),
                        "profile_pic": result.get("profile_pic", "")
                    }
        except Exception as e:
            print(f"‚ö†Ô∏è Method failed: {e}")
            continue

    fallback_name = f"User...{psid[-8:]}" if len(psid) > 8 else f"User {psid}"
    return {
        "name": fallback_name,
        "first_name": "Unknown",
        "last_name": "",
        "profile_pic": ""
    }

def get_name_from_messages(conversation_id, access_token, page_id):
    try:
        endpoint = f"{conversation_id}/messages"
        params = {
            "fields": "from,message",
            "limit": 10
        }
        result = fb_get(endpoint, params, access_token)
        if "data" in result:
            for message in result["data"]:
                sender = message.get("from", {})
                sender_name = sender.get("name")
                sender_id = sender.get("id")
                if sender_id != page_id and sender_name:
                    return sender_name
        return None
    except Exception as e:
        print(f"‚ùå Error getting name from messages: {e}")
        return None

def get_first_message_time(conversation_id, access_token):
    endpoint = f"{conversation_id}/messages"
    params = {
        "fields": "created_time",
        "limit": 1,
        "order": "chronological"
    }
    result = fb_get(endpoint, params, access_token)
    if "data" in result and result["data"]:
        return result["data"][0].get("created_time")
    return None

def extract_psids_with_conversation_id(conversations_data, access_token, page_id):
    result = []
    if not conversations_data or "data" not in conversations_data:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• conversations")
        return result

    for convo in conversations_data.get("data", []):
        convo_id = convo.get("id")
        updated_time = convo.get("updated_time")
        participants = convo.get("participants", {}).get("data", [])
        created_time = get_first_message_time(convo_id, access_token)
        user_psids = []
        user_names = []

        for participant in participants:
            participant_id = participant.get("id")
            if participant_id and participant_id != page_id:
                user_psids.append(participant_id)
                user_name = participant.get("name") or None

                if not user_name:
                    user_info = get_user_info_from_psid(participant_id, access_token)
                    user_name = user_info.get("name")

                if not user_name or user_name.startswith("User"):
                    message_name = get_name_from_messages(convo_id, access_token, page_id)
                    if message_name:
                        user_name = message_name

                if not user_name:
                    user_name = f"User...{participant_id[-8:]}"
                user_names.append(user_name)

        if user_psids:
            result.append({
                "conversation_id": convo_id,
                "psids": user_psids,
                "names": user_names,
                "updated_time": updated_time,
                "created_time": created_time
            })
    return result

# ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó endpoint ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó interaction ‡∏î‡πâ‡∏ß‡∏¢
@router.post("/send/{page_id}/{psid}")
async def send_user_message_by_psid(
    page_id: str,
    psid: str,
    req: SendMessageRequest,
    request: Request,
    db: Session = Depends(get_db)
):
    print(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á PSID: {psid}")
    print(f"üì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {req.message}")

    access_token = page_tokens.get(page_id)
    if not access_token:
        return {"error": "Page token not found. Please connect via /connect first."}

    if not psid or len(psid) < 10:
        return {"error": "Invalid PSID"}

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    if req.type == "image":
        image_path = f"{image_dir}/{req.message}"
        result = send_image_binary(psid, image_path, access_token)
    elif req.type == "video":
        video_path = f"{vid_dir}/{req.message}"
        result = send_video_binary(psid, video_path, access_token)
    else:
        result = send_message(psid, req.message, access_token)

    if "error" in result:
        return {"error": result["error"], "details": result}
    else:
        return {"success": True, "result": result}
    
@router.get("/customers/{page_id}")
async def get_customers(
    page_id: str, 
    skip: int = 0, 
    limit: int = 100,
    search: str = None,
    db: Session = Depends(get_db)
):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å database"""
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}
        )
    
    if search:
        customers = crud.search_customers(db, page.ID, search)
    else:
        customers = crud.get_customers_by_page(db, page.ID, skip, limit)
    
    # ‡πÅ‡∏õ‡∏•‡∏á format
    result = []
    for customer in customers:
        result.append({
            "id": customer.id,
            "psid": customer.customer_psid,
            "name": customer.name or f"User...{customer.customer_psid[-8:]}",
            "first_interaction": customer.first_interaction_at.isoformat() if customer.first_interaction_at else None,
            "last_interaction": customer.last_interaction_at.isoformat() if customer.last_interaction_at else None,
            "customer_type": customer.customer_type_custom.type_name if customer.customer_type_custom else None
        })
    
    return {
        "customers": result,
        "total": len(result),
        "page_id": page_id
    }

@router.get("/customer/{page_id}/{psid}")
async def get_customer_detail(
    page_id: str, 
    psid: str,
    db: Session = Depends(get_db)
):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô"""
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}
        )
    
    customer = crud.get_customer_by_psid(db, page.ID, psid)
    if not customer:
        return JSONResponse(
            status_code=404, 
            content={"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"}
        )
    
    return {
        "id": customer.id,
        "psid": customer.customer_psid,
        "name": customer.name,
        "first_interaction": customer.first_interaction_at.isoformat() if customer.first_interaction_at else None,
        "last_interaction": customer.last_interaction_at.isoformat() if customer.last_interaction_at else None,
        "customer_type_custom": customer.customer_type_custom.type_name if customer.customer_type_custom else None,
        "customer_type_knowledge": customer.customer_type_knowledge.type_name if customer.customer_type_knowledge else None,
        "created_at": customer.created_at.isoformat(),
        "updated_at": customer.updated_at.isoformat()
    }

@router.put("/customer/{page_id}/{psid}")
async def update_customer(
    page_id: str, 
    psid: str,
    customer_data: dict,
    db: Session = Depends(get_db)
):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}
        )
    
    customer = crud.get_customer_by_psid(db, page.ID, psid)
    if not customer:
        return JSONResponse(
            status_code=404, 
            content={"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"}
        )
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if "name" in customer_data:
        customer.name = customer_data["name"]
    if "customer_type_custom_id" in customer_data:
        customer.customer_type_custom_id = customer_data["customer_type_custom_id"]
    if "customer_type_knowledge_id" in customer_data:
        customer.customer_type_knowledge_id = customer_data["customer_type_knowledge_id"]
    
    customer.updated_at = datetime.now()
    db.commit()
    db.refresh(customer)
    
    return {"status": "success", "message": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}
# ================================
# üß™ Debug Routes - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ Debug
# ================================

@router.get("/debug/tokens")
async def debug_tokens():
    """‡∏î‡∏π token ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ"""
    return {
        "page_tokens_count": len(page_tokens),
        "page_tokens": {k: f"{v[:20]}..." for k, v in page_tokens.items()},
        "page_names": page_names
    }

@router.get("/debug/conversations/{page_id}")
async def debug_conversations(page_id: str):
    """Debug conversations data"""
    access_token = page_tokens.get(page_id)
    if not access_token:
        return {"error": "Page token not found"}
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    raw_conversations = get_conversations_with_participants(page_id, access_token)
    
    return {
        "page_id": page_id,
        "has_token": bool(access_token),
        "token_preview": f"{access_token[:20]}..." if access_token else None,
        "raw_data": raw_conversations
    }
        
# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Facebook ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ sync)
@router.get("/conversations-from-facebook/{page_id}")
async def get_conversations_from_facebook(page_id: str):
    """‡∏î‡∏∂‡∏á conversations ‡∏à‡∏≤‡∏Å Facebook API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync)"""
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Facebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö access token
    access_token = page_tokens.get(page_id)
    if not access_token:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}"}
        )
    
    try:
        return {
            "conversations": [], # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Facebook
            "total": 0,
            "source": "facebook"
        }
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": str(e)}
        )

@router.post("/schedule/activate")
async def activate_schedule(request: Request):
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô schedule"""
    data = await request.json()
    page_id = data.get('page_id')
    schedule = data.get('schedule')
    
    if not page_id or not schedule:
        return {"status": "error", "message": "Missing required data"}
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens ‡πÉ‡∏´‡πâ scheduler ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° schedule
    message_scheduler.set_page_tokens(page_tokens)
    
    # Reset sent tracking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö schedule ‡∏ô‡∏µ‡πâ
    schedule_id = str(schedule['id'])
    message_scheduler.sent_tracking[schedule_id] = set()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• schedule
    if 'pageId' not in schedule and page_id:
        schedule['pageId'] = page_id
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° schedule ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
    message_scheduler.add_schedule(page_id, schedule)
    
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÉ‡∏´‡πâ process ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if schedule.get('type') == 'immediate':
        await message_scheduler.process_schedule(page_id, schedule)
        return {"status": "success", "message": "Immediate schedule processed"}
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scheduled ‡πÅ‡∏•‡∏∞ user-inactive ‡∏à‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ scheduler ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    return {"status": "success", "message": "Schedule activated"}

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π active schedules:
@router.get("/active-schedules/{page_id}")
async def get_active_schedules(page_id: str):
    """‡∏î‡∏π schedules ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    schedules = message_scheduler.get_active_schedules_for_page(page_id)
    return {
        "page_id": page_id,
        "active_schedules": schedules,
        "count": len(schedules)
    }

@router.post("/schedule/deactivate")
async def deactivate_schedule(request: Request):
    """‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô schedule"""
    data = await request.json()
    page_id = data.get('page_id')
    schedule_id = data.get('schedule_id')
    
    if not page_id or schedule_id is None:
        return {"status": "error", "message": "Missing required data"}
    
    message_scheduler.remove_schedule(page_id, schedule_id)
    
    return {"status": "success", "message": "Schedule deactivated"}

@router.get("/schedule/test-inactivity/{page_id}")
async def test_user_inactivity(page_id: str, minutes: int = 1):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    
    Parameters:
    - page_id: ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à
    - minutes: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (default = 1)
    """
    # Mock schedule for testing
    test_schedule = {
        "id": 999,
        "type": "user-inactive",
        "inactivityPeriod": str(minutes),
        "inactivityUnit": "minutes",
        "groups": [1],
        "messages": [
            {
                "type": "text",
                "content": f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏°‡∏≤ {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
                "order": 0
            },
            {
                "type": "text", 
                "content": "‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì! ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏™‡∏¥‡∏Ñ‡∏∞ üíù",
                "order": 1
            }
        ]
    }
    
    # Reset tracking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    message_scheduler.sent_tracking["999"] = set()
    
    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó page tokens ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    message_scheduler.set_page_tokens(page_tokens)
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    await message_scheduler.check_user_inactivity(page_id, test_schedule)
    
    # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    sent_users = list(message_scheduler.sent_tracking.get("999", set()))
    
    return {
        "status": "success", 
        "message": f"Checked users inactive for {minutes} minutes",
        "sent_to_users": sent_users,
        "count": len(sent_users)
    }

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset tracking
@router.post("/schedule/reset-tracking/{schedule_id}")
async def reset_schedule_tracking(schedule_id: str):
    """Reset tracking data ‡∏Ç‡∏≠‡∏á schedule"""
    message_scheduler.sent_tracking[schedule_id] = set()
    return {"status": "success", "message": f"Reset tracking for schedule {schedule_id}"}

@router.get("/schedule/system-status")
async def get_system_status():
    """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö scheduler"""
    return {
        "is_running": message_scheduler.is_running,
        "active_pages": list(message_scheduler.active_schedules.keys()),
        "total_schedules": sum(len(schedules) for schedules in message_scheduler.active_schedules.values()),
        "schedules_by_page": {
            page_id: len(schedules) 
            for page_id, schedules in message_scheduler.active_schedules.items()
        },
        "tracking_info": {
            schedule_id: len(users) 
            for schedule_id, users in message_scheduler.sent_tracking.items()
        }
    }

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå facebook.py
@router.post("/update-user-inactivity/{page_id}")
async def update_user_inactivity(page_id: str, request: Request):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á users ‡∏à‡∏≤‡∏Å frontend"""
    try:
        data = await request.json()
        user_data = data.get('users', [])
        
        if not user_data:
            return {"status": "error", "message": "No user data provided"}
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô scheduler
        message_scheduler.update_user_inactivity_data(page_id, user_data)
        
        return {
            "status": "success", 
            "message": f"Updated inactivity data for {len(user_data)} users",
            "updated_count": len(user_data)
        }
        
    except Exception as e:
        logger.error(f"Error updating user inactivity data: {e}")
        return {"status": "error", "message": str(e)}

# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sync-customers ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
@router.post("/sync-customers/{page_id}")
async def sync_facebook_customers_enhanced(
    page_id: str, 
    start_date: Optional[str] = Query(None),
    end_date: Optional[str] = Query(None),
    period: Optional[str] = Query(None),
    db: Session = Depends(get_db)
):
    """Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Facebook ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
    print(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}")
    print(f"üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: period={period}, start={start_date}, end={end_date}")

    bangkok_tz = pytz.timezone("Asia/Bangkok")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ page ‡πÉ‡∏ô database ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏à‡∏Å‡πà‡∏≠‡∏ô"}
        )
    
    # ‡∏î‡∏∂‡∏á access token
    access_token = page_tokens.get(page_id)
    print(f"Received access_token: {access_token}")  # <--- debug line

    if not access_token:
        access_token = page_tokens.get(page_id)

    if not access_token:
        return JSONResponse(status_code=400, content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö access_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page_id: {page_id}"})
    
    try:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        filter_start_date = None
        filter_end_date = None
        
        if period:
            now = datetime.now(bangkok_tz)
            if period == 'today':
                filter_start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            elif period == 'week':
                filter_start_date = now - timedelta(days=7)
            elif period == 'month':
                filter_start_date = now - timedelta(days=30)
            elif period == '3months':
                filter_start_date = now - timedelta(days=90)
            elif period == '6months':
                filter_start_date = now - timedelta(days=180)
            elif period == 'year':
                filter_start_date = now - timedelta(days=365)
            
            filter_end_date = now
        
        elif start_date and end_date:
            filter_start_date = bangkok_tz.localize(datetime.fromisoformat(start_date))
            filter_end_date = bangkok_tz.localize(datetime.fromisoformat(end_date + 'T23:59:59'))
        
        print(f"üïí ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà: {filter_start_date} ‡∏ñ‡∏∂‡∏á {filter_end_date}")
        
        # ‡∏î‡∏∂‡∏á conversations ‡∏à‡∏≤‡∏Å Facebook ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        endpoint = f"{page_id}/conversations"
        params = {
            "fields": "participants,updated_time,id,messages.limit(100){created_time,from,message}",
            "limit": 100
        }
        
        conversations = fb_get(endpoint, params, access_token)
        if "error" in conversations:
            logger.error(f"Error getting conversations: {conversations['error']}")
            return JSONResponse(
                status_code=500,
                content={"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á conversations ‡πÑ‡∏î‡πâ"}
            )
        
        sync_count = 0
        error_count = 0
        filtered_count = 0
        customers_to_sync = []
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ conversation
        for convo in conversations.get("data", []):
            convo_id = convo.get("id")
            updated_time = convo.get("updated_time")
            participants = convo.get("participants", {}).get("data", [])
            messages = convo.get("messages", {}).get("data", [])
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            if filter_start_date and updated_time:
                try:
                    convo_time = datetime.fromisoformat(updated_time.replace('Z', '+00:00')).astimezone(bangkok_tz)
                    if convo_time < filter_start_date or convo_time > filter_end_date:
                        filtered_count += 1
                        continue
                except:
                    pass
            
            # ‡∏´‡∏≤ user participants (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà page)
            for participant in participants:
                participant_id = participant.get("id")
                if participant_id and participant_id != page_id:
                    try:
                        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ messages ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if not messages:
                            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ messages ‡πÉ‡∏ô conversation {convo_id}")
                            continue

                        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á user
                        user_messages = [
                            msg for msg in messages 
                            if msg.get("from", {}).get("id") == participant_id
                        ]
                                    
                        # fallback: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡πà‡∏á user ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡πÉ‡∏ô conversation ‡πÅ‡∏ó‡∏ô
                        sorted_messages = sorted(messages, key=lambda x: x.get("created_time", ""))
                        first_msg_time = None
                        last_msg_time = None

                        if user_messages:
                            user_messages.sort(key=lambda x: x.get("created_time") or "")
                            first_msg_time = user_messages[0].get("created_time")
                            last_msg_time = user_messages[-1].get("created_time")
                        elif messages:
                            sorted_messages = sorted(messages, key=lambda x: x.get("created_time") or "")
                            first_msg_time = sorted_messages[0].get("created_time")
                            last_msg_time = sorted_messages[-1].get("created_time")
                        else:
                            first_msg_time = last_msg_time = updated_time

                        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                        if first_msg_time:
                            try:
                                fixed_str = fix_isoformat(first_msg_time.replace("Z", "+00:00"))
                                first_interaction = datetime.fromisoformat(fixed_str).astimezone(bangkok_tz)
                            except Exception as e:
                                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á first_msg_time: {first_msg_time} - {e}")
                                first_interaction = None

                        if last_msg_time:
                            try:
                                fixed_str = fix_isoformat(last_msg_time.replace("Z", "+00:00"))
                                last_interaction = datetime.fromisoformat(fixed_str).astimezone(bangkok_tz)
                            except Exception as e:
                                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á last_msg_time: {last_msg_time} - {e}")
                                last_interaction = first_interaction

                        print(f"üïì first_msg_time: {first_msg_time}, last_msg_time: {last_msg_time}")
                        print(f"‚û°Ô∏è first_interaction: {first_interaction}, last_interaction: {last_interaction}")
                        
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á user ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á conversation
                        if not first_interaction:
                            try:
                                first_interaction = datetime.fromisoformat(updated_time.replace('Z', '+00:00')).astimezone(bangkok_tz)
                            except Exception as e:
                                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á updated_time: {updated_time} - {e}")
                                first_interaction = None

                        if not last_interaction:
                            last_interaction = first_interaction

                        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
                        user_name = participant.get("name")
                        
                        if not user_name:
                            user_info = get_user_info_from_psid(participant_id, access_token)
                            user_name = user_info.get("name")
                        
                        if not user_name or user_name.startswith("User"):
                            message_name = get_name_from_messages(convo_id, access_token, page_id)
                            if message_name:
                                user_name = message_name
                        
                        if not user_name:
                            user_name = f"User...{participant_id[-8:]}"
                        
                        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync
                        customer_data = {
                            'customer_psid': participant_id,
                            'name': user_name,
                            'first_interaction_at': first_interaction,
                            'last_interaction_at': last_interaction,
                        }
                        
                        customers_to_sync.append(customer_data)
                        
                    except Exception as e:
                        print(f"‚ùå Error processing customer {participant_id}: {e}")
                        error_count += 1
                    
        installed_at = page.created_at
        if installed_at is None:
            installed_at = datetime.now(bangkok_tz)
        elif installed_at.tzinfo is None:
            installed_at = bangkok_tz.localize(installed_at)
        else:
            installed_at = installed_at.astimezone(bangkok_tz)


        for customer_data in customers_to_sync:
            first = customer_data.get("first_interaction_at")
    
            if isinstance(first, str):
                first = datetime.fromisoformat(first.replace("Z", "+00:00")).astimezone(bangkok_tz)
    
            if not first:
                first = datetime.now(bangkok_tz)
            elif first.tzinfo is None:
                first = bangkok_tz.localize(first)
            else:
                first = first.astimezone(bangkok_tz)
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì source_type
            source_type = "new" if first >= installed_at else "imported"

            customer_data["first_interaction_at"] = first
            customer_data["source_type"] = source_type
        
        # Bulk sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á database
        sync_results = {"created": 0, "updated": 0, "errors": 0}  # default

        if customers_to_sync:
            sync_results = crud.bulk_create_or_update_customers(db, page.ID, customers_to_sync)
            sync_count = sync_results["created"] + sync_results["updated"]
            error_count += sync_results["errors"]

            print(f"‚úÖ Sync ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà {sync_results['created']} ‡∏Ñ‡∏ô, ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó {sync_results['updated']} ‡∏Ñ‡∏ô")
        else:
            sync_count = 0
        
        return {
            "status": "success",
            "synced": sync_count,
            "errors": error_count,
            "filtered": filtered_count,
            "message": f"Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {sync_count} ‡∏Ñ‡∏ô" + 
                      (f" (‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å {filtered_count} conversations)" if filtered_count > 0 else ""),
            "details": {
                "created": sync_results.get("created", 0),
                "updated": sync_results.get("updated", 0)
            }
        }
        
    except Exception as e:
        print(f"‚ùå Error during sync: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync: {str(e)}"}
        )

def fix_isoformat(dt_str: str) -> str:
    if dt_str[-5] in ['+', '-'] and dt_str[-3] != ':':
        dt_str = dt_str[:-2] + ':' + dt_str[-2:]
    return dt_str

# ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
@router.get("/customer-statistics/{page_id}")
async def get_customer_statistics(
    page_id: str,
    db: Session = Depends(get_db)
):
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à"""
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        return JSONResponse(
            status_code=400, 
            content={"error": f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}
        )
    
    stats = crud.get_customer_statistics(db, page.ID)
    
    return {
        "page_id": page_id,
        "page_name": page.page_name,
        "statistics": stats,
        "generated_at": datetime.now().isoformat()
    }

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
@router.post("/customer-groups")
async def create_customer_group(
    group_data: CustomerGroupCreate,
    db: Session = Depends(get_db)
):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"""
    try:
        # ‡πÉ‡∏ä‡πâ crud function ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        new_group = crud.create_customer_type_custom(
            db, 
            page_id=group_data.page_id,
            type_data={
                'type_name': group_data.type_name,
                'keywords': group_data.keywords,  # ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô list
                'rule_description': group_data.rule_description,
                'examples': group_data.examples, #  ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô list
                'is_active': True
            }
        )
        
        return {
            "id": new_group.id,
            "page_id": new_group.page_id,
            "type_name": new_group.type_name,
            "keywords": new_group.keywords if isinstance(new_group.keywords, list) else [],
            "rule_description": new_group.rule_description,
            "examples": new_group.examples if isinstance(new_group.examples, list) else [],
            "created_at": new_group.created_at,
            "updated_at": new_group.updated_at
        }
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

# ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à
@router.get("/customer-groups/{page_id}")
async def get_customer_groups(
    page_id: int,  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å str ‡πÄ‡∏õ‡πá‡∏ô int
    include_inactive: bool = False,
    db: Session = Depends(get_db)
):
    """‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à"""
    # page_id ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô integer ID ‡∏à‡∏≤‡∏Å database ‡πÅ‡∏•‡πâ‡∏ß
    
    query = db.query(models.CustomerTypeCustom).filter(
        models.CustomerTypeCustom.page_id == page_id
    )
    
    if not include_inactive:
        query = query.filter(models.CustomerTypeCustom.is_active == True)
    
    groups = query.order_by(models.CustomerTypeCustom.created_at.desc()).all()
    
    result = []
    for group in groups:
        result.append({
            "id": group.id,
            "page_id": group.page_id,
            "type_name": group.type_name,
            "keywords": group.keywords or [],
            "examples": group.examples or [],
            "rule_description": group.rule_description,
            "is_active": group.is_active,
            "created_at": group.created_at,
            "updated_at": group.updated_at,
            "customer_count": len(group.customers)
        })
    
    return result

# ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
@router.get("/customer-group/{group_id}")
async def get_customer_group(
    group_id: int,
    db: Session = Depends(get_db)
):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID"""
    group = db.query(models.CustomerTypeCustom).filter(
        models.CustomerTypeCustom.id == group_id
    ).first()
    
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    return {
        "id": group.id,
        "page_id": group.page_id,
        "type_name": group.type_name,
        "keywords": group.keywords.split(",") if group.keywords else [],
        "examples": group.examples.split("\n") if group.examples else [],
        "rule_description": group.rule_description,
        "is_active": group.is_active,
        "created_at": group.created_at,
        "updated_at": group.updated_at,
        "customer_count": len(group.customers)
    }

# ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
@router.put("/customer-groups/{group_id}")
async def update_customer_group(
    group_id: int,
    group_update: CustomerGroupUpdate,
    db: Session = Depends(get_db)
):
    """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
    group = db.query(models.CustomerTypeCustom).filter(
        models.CustomerTypeCustom.id == group_id
    ).first()
    
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    try:
        update_data = {}
        if group_update.type_name is not None:
            update_data['type_name'] = group_update.type_name
        if group_update.keywords is not None:
            update_data['keywords'] = group_update.keywords
        if group_update.rule_description is not None:
            update_data['rule_description'] = group_update.rule_description
        if group_update.examples is not None:
            update_data['examples'] = group_update.examples
        if group_update.is_active is not None:
            update_data['is_active'] = group_update.is_active
            
        # ‡πÉ‡∏ä‡πâ crud function ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        updated_group = crud.update_customer_type_custom(db, group_id, update_data)
        
        return {
            "id": updated_group.id,
            "type_name": updated_group.type_name,
            "keywords": updated_group.keywords if isinstance(updated_group.keywords, list) else [],
            "rule_description": updated_group.rule_description,
            "examples": updated_group.examples if isinstance(updated_group.examples, list) else [],
            "updated_at": updated_group.updated_at
        }
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

# ‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
@router.delete("/customer-groups/{group_id}")
async def delete_customer_group(
    group_id: int,
    hard_delete: bool = False,
    db: Session = Depends(get_db)
):
    """‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
    group = db.query(models.CustomerTypeCustom).filter(
        models.CustomerTypeCustom.id == group_id
    ).first()
    
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    try:
        if hard_delete:
            # Hard delete - ‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database
            db.delete(group)
        else:
            # Soft delete - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô is_active ‡πÄ‡∏õ‡πá‡∏ô False
            group.is_active = False
            group.updated_at = datetime.now()
        
        db.commit()
        
        return {"status": "success", "message": "Group deleted successfully"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
@router.post("/auto-group-customer")
async def auto_group_customer(
    page_id: str,
    customer_psid: str,
    message_text: str,
    db: Session = Depends(get_db)
):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    page = crud.get_page_by_page_id(db, page_id)
    if not page:
        raise HTTPException(status_code=404, detail="Page not found")
    
    # ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à
    groups = db.query(models.CustomerTypeCustom).filter(
        models.CustomerTypeCustom.page_id == page.ID,
        models.CustomerTypeCustom.is_active == True
    ).all()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö keywords
    detected_group = None
    message_lower = message_text.lower()
    
    for group in groups:
        if group.keywords:
            keywords = [k.strip().lower() for k in group.keywords.split(",")]
            for keyword in keywords:
                if keyword and keyword in message_lower:
                    detected_group = group
                    break
        if detected_group:
            break
    
    if detected_group:
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer = crud.get_customer_by_psid(db, page.ID, customer_psid)
        if customer:
            customer.customer_type_custom_id = detected_group.id
            customer.updated_at = datetime.now()
            db.commit()
            
            return {
                "status": "success",
                "group_detected": detected_group.type_name,
                "keywords_matched": True
            }
    
    return {
        "status": "no_match",
        "message": "No keywords matched"
    }