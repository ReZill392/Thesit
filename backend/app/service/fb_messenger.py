import logging
from app.service.facebook_api import send_message, send_image_binary, send_video_binary
from app.config import image_dir, vid_dir
from app.database import crud

logger = logging.getLogger(__name__)

def send_facebook_message(
    db,
    page_id: str,
    psid: str,
    message: str,
    msg_type: str,
    access_token: str,
    is_system_message: bool = False
):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Facebook Messenger API
    ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô route ‡πÅ‡∏•‡∏∞ Celery
    """
    try:
        logger.info(f"üì§ Sending {msg_type} message to PSID={psid}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
        if not access_token:
            raise ValueError("Page token not found")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PSID
        if not psid or len(psid) < 5:
            raise ValueError("Invalid PSID")

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if msg_type == "image":
            image_path = f"{image_dir}/{message}"
            result = send_image_binary(psid, image_path, access_token)
        elif msg_type == "video":
            video_path = f"{vid_dir}/{message}"
            result = send_video_binary(psid, video_path, access_token)
        else:
            result = send_message(psid, message, access_token)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Facebook API
        if "error" in result:
            logger.error(f"‚ùå FB API Error: {result['error']}")
            return {"error": result["error"], "details": result}

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï interaction ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà system message
        if not is_system_message:
            page = crud.get_page_by_page_id(db, page_id)
            if page:
                crud.update_customer_interaction(db, page.ID, psid)
                logger.info(f"üìù Updated interaction for PSID={psid}")

        logger.info(f"‚úÖ Message sent successfully to {psid}")
        return {"success": True, "result": result}

    except Exception as e:
        logger.error(f"‚ùå Error sending message: {e}")
        return {"error": str(e)}