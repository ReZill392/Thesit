from apscheduler.schedulers.background import BackgroundScheduler
import requests
from app.database.crud import get_all_connected_pages, sync_missing_retarget_tiers
from app.database.database import SessionLocal
from app.database import crud
from app.LLM.agent import classify_and_assign_tier_hybrid
from app.database import models
from app.celery_task.customers import sync_customers_task
from app.celery_task.messages import sync_customer_messages_task
from app.celery_task.classification import scheduled_hybrid_classification_task, classify_page_tier_task
from app.celery_task.auto_sync_tasks import sync_all_pages_task
import logging

logger = logging.getLogger(__name__)

SYNC_TIMEOUT = 60*5

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Facebook
def schedule_facebook_sync():
    db = SessionLocal()
    try:
        all_pages = get_all_connected_pages(db)
        for page_id in all_pages:
            print(f"üîÅ Scheduling Celery sync for page_id={page_id}")
            sync_customers_task.delay(page_id) 
    finally:
        db.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Facebook
def schedule_facebook_messages_sync():
    """Sync ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Facebook"""
    db = SessionLocal()
    try:
        all_pages = get_all_connected_pages(db)
        for page_id in all_pages:
            print(f"üîÅ Scheduling Celery sync messages for page_id={page_id}")
            sync_customer_messages_task.delay(page_id)  
    finally:
        db.close()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync retarget tiers ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ page ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def sync_missing_tiers_on_startup():
    """Sync retarget tiers ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ page ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
    db = SessionLocal()
    try:
        result = crud.sync_missing_retarget_tiers(db)
        logger.info(f"‚úÖ Initial retarget tiers sync completed: {result}")
    except Exception as e:
        logger.error(f"‚ùå Failed initial retarget tiers sync: {e}")
    finally:
        db.close()

def scheduled_hybrid_classification():
    """Trigger Celery hybrid classification"""
    print("üîÅ Scheduling hybrid classification via Celery...")
    scheduled_hybrid_classification_task.delay()

def scheduled_hybrid_classification():
    """Trigger Celery hybrid classification"""
    print("üîÅ Scheduling hybrid classification via Celery...")
    classify_page_tier_task.delay()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô scheduler
def start_scheduler():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô scheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö background tasks"""
    scheduler = BackgroundScheduler()
    
    # Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏î‡∏¥‡∏°)
    scheduler.add_job(schedule_facebook_sync, 'interval', minutes=1)
    
    # Sync ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏î‡∏¥‡∏°)
    scheduler.add_job(schedule_facebook_messages_sync, 'interval', minutes=10) 
    
    # üÜï ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    scheduler.add_job(scheduled_hybrid_classification, 'interval', minutes=10)

    scheduler.add_job(sync_all_pages_task.delay, 'interval', minutes=10)
    
    # Sync retarget tiers ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
    sync_missing_tiers_on_startup()
    
    scheduler.start()
    logger.info("‚úÖ Scheduler started successfully")